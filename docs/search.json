[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Társas hálózatok elemzése",
    "section": "",
    "text": "A kurzusról\nA hálózatkutatás bár a 2000-es években futott fel igazán a társadalomtudományokban, de a gyökerei már a szociológia kezdeteitől jelen voltak. A kurzus azt a célt tűzi ki, hogy a hallgatókat megismertesse a kapcsolathálózati és hálózatkutatási gondolkodás legfontosabb elméleti és módszertani alapvetéseivel. A kurzus során megismerkedhetnek a hallgatók az alapvető gráfelméleti fogalmakkal és a teljes hálózatokat elemző módszerekkel, valamint a szociometriai kutatási irányokkal is. Hangsúlyosan olyan tanulmányokat dolgozunk fel, amik a leginkább releváns hálózatelemzési kérdésekkel foglalkoznak. A kurzuson belül kitérünk a hazai hálózatkutatás legfrissebb eredményeire is."
  },
  {
    "objectID": "index.html#elérhetőség",
    "href": "index.html#elérhetőség",
    "title": "Társas hálózatok elemzése",
    "section": "Elérhetőség",
    "text": "Elérhetőség\nKérdés esetén email-ben vagyok elérhető, vagy fogadóórában állok rendelkezésre.\nabari.kalman@arts.unideb.hu"
  },
  {
    "objectID": "index.html#jegyszerzés",
    "href": "index.html#jegyszerzés",
    "title": "Társas hálózatok elemzése",
    "section": "Jegyszerzés",
    "text": "Jegyszerzés\nA félév során két ZH-t írnak a hallgatók. A két ZH alapján megajánlott jegyet kapnak. Aki nem írta meg a ZH-kat, vagy nem felel meg számára a megajánlott jegy, írásbeli vizsgát tehet a vizsgaidőszakban. Egyik ZH sem lehet elégtelen. A magyar nyelvű irodalmak kötelezők és tartalmuk a ZH-kon és a vizsgán számonkérhető, az angol nyelvű irodalmak csak ajánlottak.\nUgyan a végső jegy összetételét a két ZH 50-50%-ban meghatározza, de plusz százalékpontok gyűjthetők például házi feladatok, kiselőadások és órai aktivitás alapján. A végső jegy meghatározása a következő táblázat alapján történik:\n\nJegyszerzés\n\n\nEredmény\nMegajánlott jegy\n\n\n\n\n0–50%\nelégtelen\n\n\n51–60%\nelégséges\n\n\n61–74%\nközepes\n\n\n75–85%\njó\n\n\n86%–\njeles"
  },
  {
    "objectID": "index.html#a-kurzus-formája",
    "href": "index.html#a-kurzus-formája",
    "title": "Társas hálózatok elemzése",
    "section": "A kurzus formája",
    "text": "A kurzus formája\nA kurzus teljes mértékben gyakorlati jellegű, az önálló hálózatelemzéshez szükséges ismeretek elsajátítása a cél. A kurzus során az RStudio/R programcsomagot használjuk."
  },
  {
    "objectID": "index.html#szoftverek",
    "href": "index.html#szoftverek",
    "title": "Társas hálózatok elemzése",
    "section": "Szoftverek",
    "text": "Szoftverek\nA számítógépünkre telepítsük a következő szoftvercsomagokat:\n\nR - https://www.r-project.org/\nRStudio Desktop - https://posit.co/products/open-source/rstudio/\nR csomagok:\n\n\ninstall.packages(\"igraph\")\ninstall.packages(\"qgraph\")"
  },
  {
    "objectID": "index.html#olvasmányok",
    "href": "index.html#olvasmányok",
    "title": "Társas hálózatok elemzése",
    "section": "Olvasmányok",
    "text": "Olvasmányok\n\nKötelező:\n\nBarabási (2011)\nMérei (1998, o. 44–323)\nCsermely (2005, o. 1–4, 8 fejezetek)\n\nAjánlott olvasmányok\n\nMolnár (2020)\nHoffman és mtsai. (2022)"
  },
  {
    "objectID": "index.html#linkek",
    "href": "index.html#linkek",
    "title": "Társas hálózatok elemzése",
    "section": "Linkek",
    "text": "Linkek\n\nhttp://linkgroup.semmelweis.hu/docs/09-tarsadalmi-halok.pdf\nhttp://szociogram.hu/blog/wp-content/uploads/2015/04/PedSzakpszichSzakdolgozatGyT.pdf\n\n\n\n\n\nBarabási, A.-L. (2011). Behálózva. A hálózatok új tudománya. Helikon Kiadó.\n\n\nCsermely, P. (2005). A rejtett hálózatok ereje. Vince Kiadó. http://linkgroup.semmelweis.hu/weaklinks_HU.php\n\n\nHoffman, T., Basa, B., & N. Kollár, K. (2022). Új sztenderdek a magyar szociometriai gyakorlatban. https://doi.org/10.17627/ALKPSZICH.2022.1.67\n\n\nMérei, F. (1998). Közösségek rejtett hálózata. Osiris Kiadó.\n\n\nMolnár, L. (2020). A hálózatelemzés alapfogalmai  gráfok, centralitás, szomszédosság, hidak és a kis világ. In Scientia rerum politicarum (o. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07"
  },
  {
    "objectID": "tematika.html#bevezetés-kedvcsináló",
    "href": "tematika.html#bevezetés-kedvcsináló",
    "title": "Tematika",
    "section": "Bevezetés, kedvcsináló",
    "text": "Bevezetés, kedvcsináló\n\nBarabási Albert-László: Behálózva - a hálózatok csodálatos világa.\nBehálózva 2.0 - Barabási Albert-László előadása.\nBarabási (2011, o. 7–14) (Bevezetés fejezet)\nCsányi & Szendrői (2004)"
  },
  {
    "objectID": "tematika.html#a-kapcsolathálózati-szemlélet.-gráfelméleti-alapok.",
    "href": "tematika.html#a-kapcsolathálózati-szemlélet.-gráfelméleti-alapok.",
    "title": "Tematika",
    "section": "A kapcsolathálózati szemlélet. Gráfelméleti alapok.",
    "text": "A kapcsolathálózati szemlélet. Gráfelméleti alapok.\n\nBarabási (2011, o. 15–47) (1-3. fejezet)\nMolnár (2020)"
  },
  {
    "objectID": "tematika.html#irányított-gráfok.-centralitás.",
    "href": "tematika.html#irányított-gráfok.-centralitás.",
    "title": "Tematika",
    "section": "Irányított gráfok. Centralitás.",
    "text": "Irányított gráfok. Centralitás.\n\nKürtösi (2011)\nBarabási (2011, o. 48–89) (4-6. fejezet)\n\n\n\n\n\nBarabási, A.-L. (2011). Behálózva. A hálózatok új tudománya. Helikon Kiadó.\n\n\nCsányi, G., & Szendrői, B. (2004). Szociális hálózatok. Beszélő, 9(7). http://beszelo.c3.hu/cikkek/szocialis-halozatok\n\n\nKürtösi, Z. (2011). Társadalmi kapcsolathálózatok elemzése (K. Takács, Szerk.; o. 19–31). BCE Szociológia és Társadalompolitika Intézet. https://unipub.lib.uni-corvinus.hu/4699/\n\n\nMolnár, L. (2020). A hálózatelemzés alapfogalmai  gráfok, centralitás, szomszédosság, hidak és a kis világ. In Scientia rerum politicarum (o. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07"
  },
  {
    "objectID": "01_halozatok_R_ben.html#bevezetés-az-igraph-csomagba",
    "href": "01_halozatok_R_ben.html#bevezetés-az-igraph-csomagba",
    "title": "1  Hálózatok az R-ben",
    "section": "1.1 Bevezetés az igraph csomagba",
    "text": "1.1 Bevezetés az igraph csomagba\nSzámos szoftver képes hálózati adatokat feldolgozni, kezelni és megjeleníteni. Ebben a kurzusban a R/RStudio {igraph} csomagját fogjuk használni.\nEgy hálózat (vagy gráf) egy igraph objektumnak feletethető meg. Az fogjuk bemutatni, hogyan hozható létre új igraph objektum közvetlenül nyers adatokból. A használt függvények:\n\ngraph.edgelist() - hálózat létrehozása élek listájából\nplot() - hálózat megjelenítése\nV() - a csúcsok száma és megnevezése\nE() - az élek száma és az élek azonosítása csúcsokkal\ngsize() / ecount() - az élek száma\ngorder() / vcount() - a csúcsok száma\n\n\n1.1.1 igraph objektum létrehozása\nHogyan hozzunk létre igraph objektumot élek listájából? A következő adatok egy diákcsoportban fennálló barátságokat tárja fel. A friends adattábla minden sora egy élt (vagyis a barátság jelenlétét a két személy között) jelöl a hálózatban.\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n             \"Jessie\",  \"Sidney\",\n             \"Jessie\",   \"Britt\",\n             \"Sidney\",   \"Britt\",\n             \"Sidney\",  \"Donnie\",\n               \"Karl\",   \"Berry\",\n             \"Sidney\",    \"Rene\",\n              \"Britt\",    \"Rene\",\n             \"Shayne\",  \"Sidney\",\n             \"Sidney\",  \"Elisha\",\n             \"Sidney\", \"Whitney\",\n             \"Jessie\", \"Whitney\",\n             \"Donnie\",   \"Odell\",\n             \"Sidney\",   \"Odell\",\n               \"Rene\", \"Whitney\",\n             \"Shayne\",  \"Donnie\",\n             \"Jessie\",    \"Lacy\",\n               \"Rene\",    \"Lacy\",\n             \"Elisha\",  \"Eugene\",\n             \"Eugene\",    \"Jude\",\n              \"Berry\",   \"Odell\",\n              \"Odell\",  \"Rickie\",\n              \"Odell\",    \"Karl\",\n              \"Britt\",    \"Lacy\",\n             \"Elisha\",    \"Jude\",\n               \"Lacy\", \"Whitney\",\n              \"Britt\", \"Whitney\",\n               \"Karl\",   \"Tommy\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1  name2 \n#&gt;   &lt;chr&gt;  &lt;chr&gt; \n#&gt; 1 Jessie Sidney\n#&gt; 2 Jessie Britt \n#&gt; 3 Sidney Britt \n#&gt; 4 Sidney Donnie\n#&gt; 5 Karl   Berry \n#&gt; 6 Sidney Rene\n\nAz {igraph} csomag telepítése és betöltése.\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\nSzükséges technikai lépés, amely a friends adattáblát mátrixszá alakítja.\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\nAz igraph objektum létrehozása.\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\n\n1.1.2 Csúcsok és élek számolása\nEgy hálózatról számos információt lekérhetünk. Megszámolhatjuk a hálózat csúcsait és éleit.\nRészletes információ a csúcsokról.\n\nV(g) # a csúcsok száma és megnevezése\n#&gt; + 16/16 vertices, named, from 962787d:\n#&gt;  [1] Jessie  Sidney  Britt   Donnie  Karl    Berry   Rene   \n#&gt;  [8] Shayne  Elisha  Whitney Odell   Lacy    Eugene  Jude   \n#&gt; [15] Rickie  Tommy\n\nRészletes információ az élekről.\n\nE(g) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 27/27 edges from 962787d (vertex names):\n#&gt;  [1] Jessie --Sidney  Jessie --Britt   Sidney --Britt  \n#&gt;  [4] Sidney --Donnie  Karl   --Berry   Sidney --Rene   \n#&gt;  [7] Britt  --Rene    Sidney --Shayne  Sidney --Elisha \n#&gt; [10] Sidney --Whitney Jessie --Whitney Donnie --Odell  \n#&gt; [13] Sidney --Odell   Rene   --Whitney Donnie --Shayne \n#&gt; [16] Jessie --Lacy    Rene   --Lacy    Elisha --Eugene \n#&gt; [19] Eugene --Jude    Berry  --Odell   Odell  --Rickie \n#&gt; [22] Karl   --Odell   Britt  --Lacy    Elisha --Jude   \n#&gt; [25] Whitney--Lacy    Britt  --Whitney Karl   --Tommy\n\nCsak az élek száma.\n\ngsize(g) # élek száma\n#&gt; [1] 27\necount(g) # élek száma\n#&gt; [1] 27\n\nCsak a csúcsok száma.\n\ngorder(g) # csúcsok száma\n#&gt; [1] 16\nvcount(g) # csúcsok száma\n#&gt; [1] 16"
  },
  {
    "objectID": "02_alapfogalmak.html#a-fejezet-fontos-fogalmai",
    "href": "02_alapfogalmak.html#a-fejezet-fontos-fogalmai",
    "title": "2  Alapfogalmak",
    "section": "2.1 A fejezet fontos fogalmai",
    "text": "2.1 A fejezet fontos fogalmai\n\nhálózat / gráf\n\ncsúcsok és élek együttese\n\ncsúcs / csomópont\n\ntetszőleges egyed, személy, tárgy vagy fogalom\n\nél / kapcsolat / link\n\nKét csúcs közötti kapcsolat. Az élek lehetnek irányítottak és irányítatlanok.\n\nirányított él\n\nolyan él, amely határozottan egyik csúcsból a másik csúcsba mutató kapcsolatot reprezentál, például weboldalak között a linkek.\n\nirányítatlan él\n\nolyan él, amely nem reprezentál egy irányba mutató kapcsolatot, a két csúcs ilyenkor oda-vissza irányba kapcsolódik egymáshoz.\n\nN\n\ncsúcsok száma a gráfban\n\nL\n\nélek száma a gráfban\n\nteljes gráf\n\nolyan gráf, amelynek minden csúcsa kapcsolódik az összes többi csúcshoz. Teljes gráfban \\(L=\\frac{N(N-1)}{2}\\)\n\nfokszám\n\negy csúcs fokszáma az csúcshoz kapcsolódó élek száma. Jele: \\(k\\)\n\nátlagos fokszám\n\nIrányítatlan hálózatban az egyes csúcsok fokszámait összeadjuk és osztjuk a csúcsok számával: \\(\\bar{k} = \\frac{k_1+k_2+\\dots+k_N}{N} = \\frac{2L}{N}\\). Irányított hálózatban külön vizsgáljuk a bejövő (\\(k_i^{be}\\)) és a kimenő éleket (\\(k_i^{ki}\\)). Egy csúcs összfokszáma: \\(k_i=k_i^{be} + k_i^{ki}\\). Irányított gráfban \\(\\bar{k^{be}} = \\frac{k_1^{be}+k_2^{be}+\\dots+k_N^{be}}{N}=\\frac{L}{N}\\), \\(\\bar{k^{ki}} = \\frac{k_1^{ki}+k_2^{ki}+\\dots+k_N^{ki}}{N}=\\frac{L}{N}\\)\n\nfokszámeloszlás\n\nannak a valószínűsége, hogy a gráfban egy véletlenszerűen kiválasztott pontnak éppen \\(k\\) legyen a fokszáma. Jelölése: \\(p_k\\). Véletlen gráfokban a fokszámeloszlás Poisson-eloszlást követ, skálafüggetlen hálózatokban hatványfüggvény szerinti eloszlást."
  },
  {
    "objectID": "02_alapfogalmak.html#hálózatok-létrehozása",
    "href": "02_alapfogalmak.html#hálózatok-létrehozása",
    "title": "2  Alapfogalmak",
    "section": "2.2 Hálózatok létrehozása",
    "text": "2.2 Hálózatok létrehozása\nEbben a fejezetben tovább részletezzük a hálózatok létrehozását. A korábban látott R függvényeken túl, a következőkről lesz szó:\n\nas_adjacency_matrix() - igraph objektum szomszédsági mátrixszá alakítása\ngraph.adjacency() - igraph objektum létrehozása szomszédsági mátrixból\ngraph_from_literal() - igraph objektum létrehozása literálból\nmake_full_graph() - teljes gráfok készítése\nmake_ring() - gyűrű létrehozása.\nmake_star() - csillag létrehozása\nmake_tree() - fa létrehozása\n\nAlapvetően kétféle adatstruktúrából építhetünk hálózatot:\n\nélek listájából és\nszomszédsági mátrixból.\n\n\n2.2.1 Élek listája\nKorábban már láttuk, hogyan hozhatunk létre élek listájából gráfot. Most az elek_listaja_7.xlsx-ben rendeltünk össze 7 csúcsot 7 éllel.\n\ndf &lt;- rio::import(file = \"adat/elek_listaja_7.xlsx\")\ndf\n#&gt;   from to\n#&gt; 1    A  B\n#&gt; 2    A  C\n#&gt; 3    A  D\n#&gt; 4    A  E\n#&gt; 5    A  F\n#&gt; 6    E  F\n#&gt; 7    F  G\n\nKészítsük el és ábrázoljuk a fenti hálózatot.\n\nlibrary(igraph)\ng &lt;- graph.edgelist(as.matrix(df), directed = F)\nplot(g)\n\n\n\n\nA fontos információk könnyen lekérdezhetők.\n\nV(g)\n#&gt; + 7/7 vertices, named, from 9780778:\n#&gt; [1] A B C D E F G\nE(g)\n#&gt; + 7/7 edges from 9780778 (vertex names):\n#&gt; [1] A--B A--C A--D A--E A--F E--F F--G\n\nEgy létező gráf szomszédsági mátrixa könnyen meghatározható.\n\nas_adjacency_matrix(g) # igraph objektum szomszédsági mátrixszá alakítása\n#&gt; 7 x 7 sparse Matrix of class \"dgCMatrix\"\n#&gt;   A B C D E F G\n#&gt; A . 1 1 1 1 1 .\n#&gt; B 1 . . . . . .\n#&gt; C 1 . . . . . .\n#&gt; D 1 . . . . . .\n#&gt; E 1 . . . . 1 .\n#&gt; F 1 . . . 1 . 1\n#&gt; G . . . . . 1 .\n\nLátható, hogy irányítatlan gráfok esetében szimmetrikus a szomszédsági mátrix. Ott van 1-es, ahol a két csúcs között él vezet, és ott 0 (az egyszerűbb olvashatóság miatt pont), ahol nem.\n\n\n2.2.2 Szomszédsági mátrix\nKönnyen létrehozhatunk magunk is szomszédsági mátrixot, és abból igraph objektumot.\nElső esetben készítsünk 3 izolált csúcsból gráfot.\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm1 &lt;- matrix(data = c(0, 0, 0,\n                      0, 0, 0, \n                      0, 0, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm1\n#&gt;   A B C\n#&gt; A 0 0 0\n#&gt; B 0 0 0\n#&gt; C 0 0 0\n\n\n# gráf létrehozása\ng1 &lt;- graph.adjacency(m1, mode = \"undirected\")\nplot(g1) # gráf megrajzolása\n\n\n\n\nA 3 csúcsból kettő legyen összekötve\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm2 &lt;- matrix(data = c(0, 1, 0,\n                      1, 0, 0, \n                      0, 0, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm2\n#&gt;   A B C\n#&gt; A 0 1 0\n#&gt; B 1 0 0\n#&gt; C 0 0 0\n\n\n# gráf létrehozása\ng2 &lt;- graph.adjacency(m2, mode = \"undirected\")\nplot(g2) # gráf megrajzolása\n\n\n\n\nA 3 csúcsból két pár legyen összekötve\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm3 &lt;- matrix(data = c(0, 1, 0,\n                      1, 0, 1, \n                      0, 1, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm3\n#&gt;   A B C\n#&gt; A 0 1 0\n#&gt; B 1 0 1\n#&gt; C 0 1 0\n\n\n# gráf létrehozása\ng3 &lt;- graph.adjacency(m3, mode = \"undirected\")\nplot(g3) # gráf megrajzolása\n\n\n\n\nMinden csúcs össze legyen kötve.\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm4 &lt;- matrix(data = c(0, 1, 1,\n                      1, 0, 1, \n                      1, 1, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm4\n#&gt;   A B C\n#&gt; A 0 1 1\n#&gt; B 1 0 1\n#&gt; C 1 1 0\n\n\n# gráf létrehozása\ng4 &lt;- graph.adjacency(m4, mode = \"undirected\")\nplot(g4) # gráf megrajzolása\n\n\n\n\n\n\n2.2.3 Literális létrehozás\nKisebb hálózatok esetén nevekből is létrehozhatunk gráfot:\n\ngs1 &lt;- graph_from_literal(A, B, C);plot(gs1)\ngs2 &lt;- graph_from_literal(A-B, C);plot(gs2)\ngs3 &lt;- graph_from_literal(A-B-C);plot(gs3)\ngs4 &lt;- graph_from_literal(A-B-C, A-C);plot(gs4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.4 Speciális gráfok\nSpeciális gráfok létrehozását is megkönnyíti az {igraph} csomag.\nTeljes gráfok készítése.\n\n# teljes gráfok készítése\nplot(make_full_graph(5, directed = FALSE, loops = FALSE))\nplot(make_full_graph(10, directed = FALSE, loops = FALSE))\nplot(make_full_graph(20, directed = FALSE, loops = FALSE))\n\n\n\n\n\n\n\n\n\n\nGyűrű létrehozása.\n\n# gyűrű létrehozása\nplot(print_all(make_ring(5)))\n#&gt; IGRAPH 98826ab U--- 5 5 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from 98826ab:\n#&gt; [1] 1--2 2--3 3--4 4--5 1--5\nplot(print_all(make_ring(10)))\n#&gt; IGRAPH 9883c0d U--- 10 10 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from 9883c0d:\n#&gt;  [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10\nplot(print_all(make_ring(20)))\n#&gt; IGRAPH 9887fd8 U--- 20 20 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from 9887fd8:\n#&gt;  [1]  1-- 2  2-- 3  3-- 4  4-- 5  5-- 6  6-- 7  7-- 8  8-- 9 ...\n#&gt; [10] 10--11 11--12 12--13 13--14 14--15 15--16 16--17 17--18 ...\n#&gt; [19] 19--20  1--20\n\n\n\n\n\n\n\n\n\n\nCsillag létrehozása.\n\n# csillag létrehozása\nplot(make_star(5, mode = \"undirected\"))\nplot(make_star(10, mode = \"undirected\"))\nplot(make_star(20, mode = \"undirected\"))\n\n\n\n\n\n\n\n\n\n\nFa létrehozása\n\n# fa létrehozása\nplot(make_tree(10, 3, mode = \"undirected\"))\nplot(make_tree(20, 3, mode = \"undirected\"))\nplot(make_tree(60, 3, mode = \"undirected\"))"
  },
  {
    "objectID": "02_alapfogalmak.html#hálózat-attribútumai",
    "href": "02_alapfogalmak.html#hálózat-attribútumai",
    "title": "2  Alapfogalmak",
    "section": "2.3 Hálózat attribútumai",
    "text": "2.3 Hálózat attribútumai\nEbben a fejezetben további jellemzőkkel látjuk el a hálózatokat. A korábban látott R függvényeken túl, a következőkről lesz szó:\n\nvertex_attr() - csúcsok attribútumainak lekérdezése\nedge_attr() - élek attribútumainak lekérdezése\nset_vertex_attr() - csúcsok attribútumainak beállítása\nset_edge_attr()- élek attribútumainak beállítása\ngraph_from_data_frame() - gráf létrehozása attribútumokkal adattáblák alapján.\n\n\n2.3.1 Attribútumok hozzáadása\nEgy hálózatban a csúcsok és élek számos tulajdonsággal (vagy más néven attribútummal) rendelkezhetnek.\nA korábbi példában létrehozott g gráf egyetlen csúcs attribútummal rendelkezik. A csúcsok nevével vagy más néven címkéjével.\n\ng # az igraph objektum kiírása a képernyőre\n#&gt; IGRAPH 9780778 UN-- 7 7 -- \n#&gt; + attr: name (v/c)\n#&gt; + edges from 9780778 (vertex names):\n#&gt; [1] A--B A--C A--D A--E A--F E--F F--G\n\nA csúcsok és élek aktuális attribútumait könnyen meghatározhatjuk.\n\nvertex_attr(g) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n\n\nedge_attr(g) # élek attribútumai (jelenleg üres)\n#&gt; list()\n\nHa szeretnénk életkort hozzáadni minden csúcshoz, akkor a set_vertex_attr() függvényt használjuk.\n\ng &lt;- set_vertex_attr(graph = g, \n                     name = \"age\", \n                     value = c(20, 25, 21, 23, 24, 23, 22)\n                     )\n\nHa most ellenőrizzük a csúcsok jellemzőit, akkor már a neven kívül a kor attribútumot is láthatjuk a listában.\n\nvertex_attr(g) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n#&gt; \n#&gt; $age\n#&gt; [1] 20 25 21 23 24 23 22\n\nHa szeretnénk a barátság erősségének egyfajta mérőszámaként a heti telefonhívások számt jellemzőként hozzáadni minden egyes élhez, akkor a set_edge_attr() függvényt használjuk.\n\ng &lt;- set_edge_attr(graph = g, \n                   name = \"frequency\", \n                   value = c(2, 1, 1, 1, 3, 2, 4)\n                   )\n\nHa most ellenőrizzük az élek jellemzőit, akkor már nem üres listát kapunk.\n\nedge_attr(g) # élek attribútumai\n#&gt; $frequency\n#&gt; [1] 2 1 1 1 3 2 4\n\nAz attribútumok meghatározása történhet a gráf létrehozásával egyidőben.\nHa előkészítettük az attribútumokkal rendelkező csúcsok és élek adattábláit, akkor a graph_from_data_frame() függvénnyel egy lépéyben is létrehozhatjuk a hálózatot.\n\nnodes_df &lt;- rio::import(file = \"adat/vertices_df_7.xlsx\")\nedges_df &lt;- rio::import(file = \"adat/edges_df_7.xlsx\")\n\ng_from_df &lt;- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = F)\n\n\nplot(g_from_df) # hálózat kirajzolása\n\n\n\n\n\nvertex_attr(g_from_df) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n#&gt; \n#&gt; $age\n#&gt; [1] 20 25 21 23 24 23 22\nedge_attr(g_from_df) # élek attribútumai\n#&gt; $frequency\n#&gt; [1] 2 1 1 1 3 2 4\n\nAhogyan a fenti outputok is utalnak rá a csúcs és él attribútumok a dollárjeles ($) hivatkozással is elérhetők.\n\nV(g)$name  # a csúcsok 'name' attribútuma\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\nV(g)$age # a csúcsok 'age' attribútuma\n#&gt; [1] 20 25 21 23 24 23 22\nE(g)$frequency # az élek 'frequency' attribútuma\n#&gt; [1] 2 1 1 1 3 2 4\n\n\n\n2.3.2 Élek szűrése\nKülönösen nagy hálózatok esetében fontos lehet a számunkra érdekes élek lekérdezése vagy szűrése. A dupla szögletes zárójelet ([[) használhatjuk a kívánt élek eléréséhez. Az .inc() segítségével a csúcsok nevére tehetünk megszorítást, de egyszerűen használhatjuk az élek egyes attribútumait is.\n\nE(g)[[.inc('E')]] # azon élek leszűrése, ahol az egyik csúcs az 'E'\n#&gt; + 2/7 edges from 9780778 (vertex names):\n#&gt;   tail head tid hid frequency\n#&gt; 4    A    E   1   5         1\n#&gt; 6    E    F   5   6         2\n\n\nE(g)[[frequency &gt;= 3]] # azon élek leszűrése, ahol az élek frequency attribútuma legalább 3\n#&gt; + 2/7 edges from 9780778 (vertex names):\n#&gt;   tail head tid hid frequency\n#&gt; 5    A    F   1   6         3\n#&gt; 7    F    G   6   7         4\n\n\n2.3.2.1 Feladat\n\nA friends.xlsx éleket tartalmazó adattáblája alapján hozzunk létre egy új gráfot, majd az egyes csúcsokhoz rendre adjuk hozzá a következő attribútumokat:\n\ngenders: “M”, “F”, “F”, “M”, “M”, “M”, “F”, “M”, “M”, “F”, “M”, “F”, “M”, “F”, “M”, “M”\nages: 18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20\n\nAz egyes élekhez adjuk hozzá, hogy a barátok hetente hány órát töltenek együtt, melyek rendre:\n\nhours: 1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5, 1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4.\n\nEzt követően kérdezzük le a csúcsok attribútumait, valamint az első 5 csúcs nevét. Majd az élek attribútumait, valamint a Britt-et tartalmazó éleket, és azokat a barátokat, akik legalább 4 órát töltenek együtt hetente.\n\nAdatok beolvasása, előkészítése:\n\nfriends_edges_df &lt;- rio::import(file = \"adat/friends.xlsx\")\n\n# nemre vonatkozó információ \ngenders &lt;- c(\"M\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"M\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"M\")\n\n# életkorra vonatkozó információ\nages &lt;- c(18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20)\n\nGráf létrehozása:\n\n# mátrixszá alakítjuk\nfriends_edges_mat &lt;- as.matrix(friends_edges_df)\n\n# igraph objektum létrehozása\nfriends_g &lt;- graph.edgelist(friends_edges_mat, directed = FALSE)\n\nCsúcsokra vonatkozó utasítások:\n\n# Létrehozunk egy 'gender' nevű új attribútumot a csúcsokhoz\nfriends_g &lt;- set_vertex_attr(friends_g, \"gender\", value = genders)\n\n# Létrehozunk egy 'age' nevű új attribútumot a csúcsokhoz\nfriends_g &lt;- set_vertex_attr(friends_g, \"age\", value = ages)\n\n# A csúcsok összes attribútumának lekérdezése, lista output\nvertex_attr(friends_g)\n#&gt; $name\n#&gt;  [1] \"Jessie\"  \"Sidney\"  \"Britt\"   \"Donnie\"  \"Karl\"    \"Berry\"  \n#&gt;  [7] \"Rene\"    \"Shayne\"  \"Elisha\"  \"Whitney\" \"Odell\"   \"Lacy\"   \n#&gt; [13] \"Eugene\"  \"Jude\"    \"Rickie\"  \"Tommy\"  \n#&gt; \n#&gt; $gender\n#&gt;  [1] \"M\" \"F\" \"F\" \"M\" \"M\" \"M\" \"F\" \"M\" \"M\" \"F\" \"M\" \"F\" \"M\" \"F\" \"M\"\n#&gt; [16] \"M\"\n#&gt; \n#&gt; $age\n#&gt;  [1] 18 19 21 20 22 18 23 21 22 20 20 22 21 18 19 20\n\n# Az első 5 csúcs attribútumának lekérdezése, adattábla nézet\nV(friends_g)[[1:5]] \n#&gt; + 5/16 vertices, named, from 991a2d5:\n#&gt;     name gender age\n#&gt; 1 Jessie      M  18\n#&gt; 2 Sidney      F  19\n#&gt; 3  Britt      F  21\n#&gt; 4 Donnie      M  20\n#&gt; 5   Karl      M  22\n\nÉlekre vonatkozó utasítások:\n\n# A barátok hetente hány órát töltenek együtt\nhours &lt;- c(1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5, 1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4)\n\n# Él attribútum (`hours`) hozzáadása\nfriends_g &lt;- set_edge_attr(friends_g, \"hours\", value = hours)\n\n# Az él attribútumok megjelenítése\nedge_attr(friends_g)\n#&gt; $hours\n#&gt;  [1] 1 2 2 1 2 5 5 1 1 3 2 1 1 5 1 2 4 1 3 1 1 1 4 1 3 3 4\n\n# Azon élek megjelenítése, amelyek tartalmazzák a \"Britt\" nevet\nE(friends_g)[[.inc('Britt')]]  \n#&gt; + 5/27 edges from 991a2d5 (vertex names):\n#&gt;      tail    head tid hid hours\n#&gt; 2  Jessie   Britt   1   3     2\n#&gt; 3  Sidney   Britt   2   3     2\n#&gt; 7   Britt    Rene   3   7     5\n#&gt; 23  Britt    Lacy   3  12     4\n#&gt; 26  Britt Whitney   3  10     3\n\n# Az összes olyan él (barát) megjelenítése, akik hetente 4 óránál többet vagy 4 órát töltenek együtt\nE(friends_g)[[hours&gt;=4]]  \n#&gt; + 6/27 edges from 991a2d5 (vertex names):\n#&gt;      tail    head tid hid hours\n#&gt; 6  Sidney    Rene   2   7     5\n#&gt; 7   Britt    Rene   3   7     5\n#&gt; 14   Rene Whitney   7  10     5\n#&gt; 17   Rene    Lacy   7  12     4\n#&gt; 23  Britt    Lacy   3  12     4\n#&gt; 27   Karl   Tommy   5  16     4\n\n\n\n\n2.3.3 Hálózat megjelenítése\nA hálózatok megjelenítésén is fejleszthetünk a csúcsra vonatkozó attribútumok segítségével.\nAdjunk egy új color attribútumot a csúcsokhoz. Minden csúcs színe vagy piros vagy fehér lesz az életkortól függően.\n\nV(g)$color &lt;- ifelse(V(g)$age &gt; 22, \"red\", \"white\") \n\nA plot() függvény felhasználja ezt az információt (a V8g)$color-t), de alapértelmezett (minden csúcsra vonatkozó) értékeket is beállíthatunk.\n\nplot(g, vertex.label.color=\"black\")\n\n\n\n\nA hálózatok megjelenése során a legfontosabb paraméterek:\n\ncsúcsok esetében:\n\nméret (például több kapcsolattal rendelkező csúcsok nagyobb méretben jelennek meg)\ncímke (jelentős csúcsok azonosítása, de a sok szöveg zavaró lehet)\nszín (különböző kategóriák megjelenése, például nem)\nforma (különböző kategóriák megjelenése, például nem)\n\nélek esetében:\n\nvastagság (az él súlya, fontossága)\nszín (kapcsolat kategorikus jellemzője)\nvonal típusa (kapcsolat kategorikus jellemzője).\n\n\nA fentieken túl az {igraph} csomag számos elrendezést kínál a megjelenítés során, amelyek a legoptimálisabb vizualizációt biztosíthatják. Ezek mindegyike biztosítja:\n\nminimalizálja az élek kereszteződését\na csúcsok nem lapolják át egymást\naz élek hossza egyenlő, amennyire lehet\na gráf legyen szimmetrikus, amennyire lehet\na nagyobb hatású csúcsok legyenek a középpontban\n\nHa szeretnénk speciális elrendezést választani, akkor a layout= argumentumot kell használnunk a plot() függvényben.\n\nplot(g, layout = layout_in_circle(g))\n\n\n\n\n\nplot(g, layout = layout_with_fr(g))\n\n\n\n\n\nplot(g, layout = layout_with_kk(g))\n\n\n\n\n\nplot(g, layout = layout_on_grid(g))\n\n\n\n\n\nplot(g, layout = layout_with_lgl(g))\n\n\n\n\n\nplot(g, layout = layout_as_tree(g))\n\n\n\n\nA legtöbb esetben a layout_nicely() megfelelő választás, amely maga választja ki az optimális megjelenést.\n\nplot(g, layout = layout_nicely(g))\n\n\n\n\n\n2.3.3.1 Feladat\n\nHozzunk létre adattáblákból egy hálózatot. A friends2_edges_df.xlsx az éleket, a friends2_nodes_df.xlsx a csúcsokat tartalmazza, mindkét adattábla &gt;tartalmaz attribútumokat is (az éleknél az hours (az egymással töltött heti óraszám), a csúcsoknál a gender (nem)).\n\nKérdezzük le az összes olyan élt (barátot), akik hetente 5 óránál többet vagy 5 órát töltenek együtt.\nMegjelenítéshez a csúcsok színét állítsuk be \"orange\", illetve \"dodgerblue\" színekre.\nPróbáljuk ki a körhálózatot, a Fruchterman-Reingold elrendezésű hálózatot, a faszerkezet megjelenítését és a legjobban illeszkedő megjelenítést.\nMódosítsuk a hálózat éleinek vastagságát a súlyuk alapján. A súly legyen az együtt töltött órák száma. A plot() függvényben használjuk a &gt;edge.width= argumentumot.\nHozzunk létre egy új gráfobjektumot a meglévő alapján. Az új gráf minden éle két óránál nagyobb súlyú lesz. Ez a delete_edges() használatával &gt;valósítható meg, amely két argumentumból áll. Az első a gráfobjektum, a második pedig az eltávolítandó élek részhalmaza. Ebben az esetben eltávolít &gt;minden olyan élt, amelynek értéke kevesebb, mint két óra.\n\n\nGráf létrehozása:\n\nfriends2_edges_df &lt;- rio::import(file = \"adat/friends2_edges_df.xlsx\")\nfriends2_nodes_df &lt;- rio::import(file = \"adat/friends2_nodes_df.xlsx\")\n\n# igraph objektum létrehozása attributumok felvitelével együtt\nfriends2_g &lt;- graph_from_data_frame(d = friends2_edges_df, vertices = friends2_nodes_df, directed = FALSE)\n\nKérdezzük le az összes olyan élt (barátot), akik hetente 5 óránál többet vagy 5 órát töltenek együtt:\n\n# Az összes olyan él (barát) megjelenítése, akik hetente 5 óránál többet vagy 5 órát töltenek együtt\nE(friends2_g)[[hours &gt;= 5]]\n#&gt; + 4/25 edges from 9978962 (vertex names):\n#&gt;         tail      head tid hid hours\n#&gt; 5     Kelley Valentine   3   6     5\n#&gt; 8     Ronald   Jasmine   4   8     5\n#&gt; 12 Valentine     Perry   6  15     5\n#&gt; 15   Jasmine      Juan   8   9     6\n\nMegjelenítéshez a csúcsok színét állítsuk be \"orange\", illetve \"dodgerblue\" színekre:\n\n# A csúcsok színének beállítása nem alapján\nV(friends2_g)$color &lt;- ifelse(V(friends2_g)$gender == \"F\", \"orange\", \"dodgerblue\")\n\n\n# Az igraph ábra megjelenítése\nplot(friends2_g, vertex.label.color = \"black\")\n\n\n\n\nPróbáljuk ki a körhálózatot, a Fruchterman-Reingold elrendezésű hálózatot, a faszerkezet megjelenítését és a legjobban illeszkedő megjelenítést:\n\n# Körhálózat megjelenítése\nplot(friends2_g, vertex.label.color = \"black\", layout = layout_in_circle(friends2_g))\n\n\n\n\n\n# Fruchterman-Reingold elrendezésű hálózat\nplot(friends2_g, vertex.label.color = \"black\", layout = layout_with_fr(friends2_g))\n\n\n\n\n\n# Faszerkezet megjelenítése\nm &lt;- layout_as_tree(friends2_g)\nplot(friends2_g, vertex.label.color = \"black\", layout = m)\n\n\n\n\n\n# a legjobban illeszkedő megjelenítés\nm1 &lt;- layout_nicely(friends2_g)\nplot(friends2_g, vertex.label.color = \"black\", layout = m1)\n\n\n\n\nMódosítsuk a hálózat éleinek vastagságát a súlyuk alapján. A súly legyen az együtt töltött órák száma. A plot() függvényben használjuk a edge.width= argumentumot.\n\n# Hozzunk létre egy `w1` vektort élsúlyozásokból a barátok együtt töltött órák száma alapján.\nw1 &lt;- E(friends2_g)$hours\n\n# Ábrázoljuk a hálózatot úgy, hogy az `edge.width=` az imént létrehozott súlyvektorra legyen beállítva. \n# Az edge.color = 'black' használata biztosítja, hogy minden él fekete legyen.\nm1 &lt;- layout_nicely(friends2_g)\nplot(friends2_g, \n        vertex.label.color = \"black\", \n        edge.color = 'black',\n        edge.width = w1,\n        layout = m1)\n\n\n\n\nHozzunk létre egy új gráfobjektumot a meglévő alapján. Az új gráf minden éle két óránál nagyobb súlyú lesz. Ez a delete_edges() használatával valósítható meg, amely két argumentumból áll. Az első a gráfobjektum, a második pedig az eltávolítandó élek részhalmaza. Ebben az esetben eltávolít minden olyan élt, amelynek értéke kevesebb, mint két óra.\n\n# új gráf létrehozása élek törlésével\nfriends2_g2 &lt;- delete_edges(friends2_g, E(friends2_g)[hours &lt; 2])\n\n\n# Végül rajzoljuk meg az új `friends2_g2` hálózatot az élszélességek és az elrendezés megfelelő vektorával.\nw2 &lt;- E(friends2_g2)$hours\nm2 &lt;- layout_nicely(friends2_g2)\n\nplot(friends2_g2, \n     vertex.label.color = \"black\", \n     edge.color = 'black',\n     edge.width = w2,\n     layout = m2)\n\n\n\n\n\n\n2.3.3.2 Feladat\n\nHozzuk létre a következő gráfot, írassuk ki a szomszédsági mátrixát, a degree() függvénnyel a fokszámokat, az átlagos fokszámot és a degree.distribution() függvénnyel a fokszámeloszlást.\n\n\n\n\n\n\nHozzuk létre a fenti irányítatlan gráfot az élek listájából:\n\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                1, 2,\n                1, 3,\n                2, 3,\n                2, 4\n)\nfriends.mat &lt;- as.matrix(friends)\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nA hálózat megjelenítése:\n\nplot(g)\n\n\n\n\nSzomszédsági mátrix:\n\nas_adjacency_matrix(g)\n#&gt; 4 x 4 sparse Matrix of class \"dgCMatrix\"\n#&gt;             \n#&gt; [1,] . 1 1 .\n#&gt; [2,] 1 . 1 1\n#&gt; [3,] 1 1 . .\n#&gt; [4,] . 1 . .\n\nA gráf lekérdezése:\n\nV(g) # a csúcsok száma és megnevezése\n#&gt; + 4/4 vertices, from 9a3a959:\n#&gt; [1] 1 2 3 4\nE(g) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 4/4 edges from 9a3a959:\n#&gt; [1] 1--2 1--3 2--3 2--4\nvcount(g) # élek száma\n#&gt; [1] 4\necount(g) # csúcsok száma\n#&gt; [1] 4\n\nAz egyes csúcsok fokszámai:\n\ndegree(g) \n#&gt; [1] 2 3 2 1\n\nA fokszámok átlaga:\n\nmean(degree(g)) \n#&gt; [1] 2\n\nA fokszámeloszlás:\n\ndegree.distribution(g) \n#&gt; [1] 0.00 0.25 0.50 0.25"
  },
  {
    "objectID": "02_alapfogalmak.html#königsbergi-hidak-problémája---1736",
    "href": "02_alapfogalmak.html#königsbergi-hidak-problémája---1736",
    "title": "2  Alapfogalmak",
    "section": "2.4 Königsbergi hidak problémája - 1736",
    "text": "2.4 Königsbergi hidak problémája - 1736\nHaladjunk át minden hídon de csak pontosan egyszer. Részletek.\nKét szempontból fontos:\n\nbizonyos problémák megoldása egyszerűbb, ha gráfként ábrázoljuk őket\naz adott gráf belső tulajdonságai meghatározóak lehetnek\n\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                \"A\",\"B\",\n                \"A\",\"C\", \n                \"A\",\"D\",\n                \"B\",\"A\",\n                \"B\",\"D\",\n                \"C\",\"A\",\n                \"C\",\"D\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1 name2\n#&gt;   &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 A     B    \n#&gt; 2 A     C    \n#&gt; 3 A     D    \n#&gt; 4 B     A    \n#&gt; 5 B     D    \n#&gt; 6 C     A\n\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\nhas_eulerian_path(g)\n#&gt; [1] FALSE\nhas_eulerian_cycle(g)\n#&gt; [1] FALSE\n\n\n1875-ben a B és C terület között új hidat építettek, így pontosan 2 páratlan fokszámú csúcs keletkezett, és a probléma megoldhatóvá vált.\n\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                \"A\",\"B\",\n                \"A\",\"C\", \n                \"A\",\"D\",\n                \"B\",\"A\",\n                \"B\",\"D\",\n                \"C\",\"A\",\n                \"C\",\"D\",\n                \"B\",\"C\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1 name2\n#&gt;   &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 A     B    \n#&gt; 2 A     C    \n#&gt; 3 A     D    \n#&gt; 4 B     A    \n#&gt; 5 B     D    \n#&gt; 6 C     A\n\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\nhas_eulerian_path(g)\n#&gt; [1] TRUE\nhas_eulerian_cycle(g)\n#&gt; [1] FALSE\neulerian_path(g)\n#&gt; $epath\n#&gt; + 8/8 edges from 9a78160 (vertex names):\n#&gt; [1] A--B A--B A--C A--C A--D B--D B--C C--D\n#&gt; \n#&gt; $vpath\n#&gt; + 9/4 vertices, named, from 9a78160:\n#&gt; [1] A B A C A D B C D"
  },
  {
    "objectID": "03_fontos_csucsok.html#a-fejezet-fogalmai",
    "href": "03_fontos_csucsok.html#a-fejezet-fogalmai",
    "title": "3  Fontos csúcsok",
    "section": "3.1 A fejezet fogalmai",
    "text": "3.1 A fejezet fogalmai\n\nvonal\n\negymáshoz kapcsolódó élek tetszőleges sorozata\n\nzárt vonal\n\nolyan vonal, ahol az első él kezdőcsúcsa megegyezik az utolsó él végpontjával\n\nséta\n\nolyan vonal, amelyben minden él különböző\n\nút (path)\n\nolyan vonal, amelyben minden csúcs (és így persze minden él is) különböző\n\nkör\n\nolyan vonal, amelyben a kezdőpont megegyezik a végponttal, de ettől eltekintve minden pont különböző\n\nHamilton kör\n\na gráf minden pontját tartalmazó kör\n\nHamilton út\n\na gráf minden pontját tartalmazó út\n\nvonal / út hossza\n\na vonalon / úton szereplő élek száma\n\nhálózat átmérője\n\na hálózat leghosszabb útja\n\ncentralitás (központiság)\n\na csúcs fontosságát leíró számszerű mutató"
  },
  {
    "objectID": "03_fontos_csucsok.html#irányított-gráfok",
    "href": "03_fontos_csucsok.html#irányított-gráfok",
    "title": "3  Fontos csúcsok",
    "section": "3.2 Irányított gráfok",
    "text": "3.2 Irányított gráfok\nA fejezetben használt {igraph} függvények:\n\nis.directed() - a gráf irányítottságát vizsgáló függvény\nis.weighted() - a gráf súlyozottságát vizsgáló függvény\nhead_of() - minden olyan csúcs lekérdezése, amely a paraméterben megadott élek végpontja\ntail_of() - függvény a paraméterben szereplő élek kezdőpontját adja meg\nincident() - azon élek listája, amelyek a paraméterben szereplő csúcsokat érinti\n\nKönnyen létrehozhatunk irányított gráfot adattáblából. Egy gráfobjektum lehet irányított vagy irányítatlan és az élek lehetnek súlyozottak vagy súlyozatlanok.\nPéldaként a kanyaró terjedésének hálózatát fogjuk használni. Az adatok a németországi Hagelloch városából származnak 1861-ből. A hálózat minden egyes irányított éle azt jelzi, hogy egy gyermek megfertőződött kanyaróval, miután kapcsolatba került egy fertőzött gyermekkel.\nAdatok beolvasása.\n\n# adattábla létrehozása\nmeasles &lt;- rio::import(file = \"adat/measles.csv\")\nhead(measles) # az adattábla első 6 sora\n#&gt;   from to\n#&gt; 1   45  1\n#&gt; 2   45  2\n#&gt; 3  172  3\n#&gt; 4  180  4\n#&gt; 5   45  5\n#&gt; 6  180  6\n\nHozzuk létre az igraph objektumot, vagyis a hálózatot.\n\nlibrary(igraph)\n# igraph objektum létrehozása\ng &lt;- graph_from_data_frame(d = measles, directed = TRUE)\n\nJelenítsük meg a hálózatot a plot() segítségével. Ezt a megjelenítést később javítani fogjuk. Hasznos lehet a hálózat megjelenítése az elemzés előtt. A hálózat láthatóságát javítja, ha kezdetben a csúcsméretet 0 (vertex.size = 0), az él nyíl mérete pedig 0,1 (edge.arrow.size = 0.2).\n\n# induló megjelenés\nplot(g, \n     vertex.label.color = \"black\", \n     edge.color = 'gray77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g))\n\n\n\n\nVizsgáljuk meg, hogy a hálózat irányított vagy sem. Ehhez a is.directed() függvényt használjuk. A visszatérési érték TRUE vagy FALSE.\n\n# a gráf irányított?\nis.directed(g)\n#&gt; [1] TRUE\n\nAmennyiben a g igraph objektumot kiíratjuk a képernyőre, akkor is felismerhetjük, hogy irányított gráfról van szó. Egyrészt a nyilakkal reprezentált élek, másrészt az első sorban szereplő DN jelzi a gráf irányítottságát.\n\ng # igrapgh objektum kiírása a képernyőre\n#&gt; IGRAPH 9c4708b DN-- 187 184 -- \n#&gt; + attr: name (v/c)\n#&gt; + edges from 9c4708b (vertex names):\n#&gt;  [1] 45 -&gt;1  45 -&gt;2  172-&gt;3  180-&gt;4  45 -&gt;5  180-&gt;6  42 -&gt;7 \n#&gt;  [8] 45 -&gt;8  182-&gt;9  45 -&gt;10 182-&gt;11 45 -&gt;12 12 -&gt;13 181-&gt;14\n#&gt; [15] 45 -&gt;15 181-&gt;16 181-&gt;17 175-&gt;18 181-&gt;19 181-&gt;20 181-&gt;21\n#&gt; [22] 45 -&gt;22 45 -&gt;23 22 -&gt;24 22 -&gt;25 45 -&gt;26 10 -&gt;27 180-&gt;28\n#&gt; [29] 31 -&gt;29 45 -&gt;30 45 -&gt;31 45 -&gt;32 45 -&gt;33 181-&gt;34 182-&gt;35\n#&gt; [36] 34 -&gt;36 182-&gt;37 17 -&gt;38 45 -&gt;39 93 -&gt;40 180-&gt;41 178-&gt;42\n#&gt; [43] 42 -&gt;43 45 -&gt;44 184-&gt;45 45 -&gt;46 45 -&gt;47 10 -&gt;48 17 -&gt;49\n#&gt; [50] 8  -&gt;50 31 -&gt;51 17 -&gt;52 17 -&gt;53 17 -&gt;54 17 -&gt;55 45 -&gt;56\n#&gt; + ... omitted several edges\n\nAmennyiben súlyozott éleket tartalmazó gráfról van szó, akkor az is.weighted() függvénnyel meggyőződhetünk ennek tényéről.\n\nis.weighted(g) # a gráf élei súlyozottak\n#&gt; [1] FALSE\n\nSúlyozott éleket tartalmaz az a gráf, amelynek az élei tartalmaznak weight attribútumot.\n\ng2 &lt;- g\n# véletlen súlyok hozzárendelése\nE(g2)$weight &lt;- sample(x = c(1,2), size = gsize(g2), replace = T)\nis.weighted(g2) # a gráf élei súlyozottak\n#&gt; [1] TRUE\n\nAz élek súlyozottsága a g2 igraph objektum kilistázásából is látható.\n\ng2 # g2 kiírása\n#&gt; IGRAPH 9c4708b DNW- 187 184 -- \n#&gt; + attr: name (v/c), weight (e/n)\n#&gt; + edges from 9c4708b (vertex names):\n#&gt;  [1] 45 -&gt;1  45 -&gt;2  172-&gt;3  180-&gt;4  45 -&gt;5  180-&gt;6  42 -&gt;7 \n#&gt;  [8] 45 -&gt;8  182-&gt;9  45 -&gt;10 182-&gt;11 45 -&gt;12 12 -&gt;13 181-&gt;14\n#&gt; [15] 45 -&gt;15 181-&gt;16 181-&gt;17 175-&gt;18 181-&gt;19 181-&gt;20 181-&gt;21\n#&gt; [22] 45 -&gt;22 45 -&gt;23 22 -&gt;24 22 -&gt;25 45 -&gt;26 10 -&gt;27 180-&gt;28\n#&gt; [29] 31 -&gt;29 45 -&gt;30 45 -&gt;31 45 -&gt;32 45 -&gt;33 181-&gt;34 182-&gt;35\n#&gt; [36] 34 -&gt;36 182-&gt;37 17 -&gt;38 45 -&gt;39 93 -&gt;40 180-&gt;41 178-&gt;42\n#&gt; [43] 42 -&gt;43 45 -&gt;44 184-&gt;45 45 -&gt;46 45 -&gt;47 10 -&gt;48 17 -&gt;49\n#&gt; [50] 8  -&gt;50 31 -&gt;51 17 -&gt;52 17 -&gt;53 17 -&gt;54 17 -&gt;55 45 -&gt;56\n#&gt; + ... omitted several edges\n\nSúlyozott gráf megjelenítéséhez használjuk a edge.width = E(g2)$weight paramétert a plot() függvényben.\n\nplot(g2, \n     vertex.label.color = \"black\", \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g),\n     edge.width = E(g2)$weight\n     )\n\n\n\n\n\n3.2.1 Az élek végpontjai\nIrányítatlan gráfok esetében, ha e egy él és az a, b csúcsok össze vannak kötve, akkor az a és b az e él végpontjai, míg irányított gráfban a-&gt;b irányított él esetén az a csúcs az e kezdőpontja (vagy töve) és b a végpontja (vagy feje).\nIrányított gráfban a head_of() segítségével minden olyan csúcsot lekérdezhetünk, amely a paraméterben megadott élek végpontja. A tail_of() függvény a paraméterben szereplő élek kezdőpontját adja meg. A head_of() függvény tehát két argumentumot tartalmaz, az első a gráfobjektum, a második pedig az élek halmaza. Ha az összes élt el akarjuk érni, akkor az E(g)-t használjuk.\n\nho_g &lt;- head_of(g, E(g)) # a gráf összes élének végpontja\nho_g\n#&gt; + 184/187 vertices, named, from 9c4708b:\n#&gt;   [1] 1   2   3   4   5   6   7   8   9   10  11  12  13  14 ...\n#&gt;  [16] 16  17  18  19  20  21  22  23  24  25  26  27  28  29 ...\n#&gt;  [31] 31  32  33  34  35  36  37  38  39  40  41  42  43  44 ...\n#&gt;  [46] 46  47  48  49  50  51  52  53  54  55  56  57  58  59 ...\n#&gt;  [61] 61  62  63  64  65  66  67  68  69  70  71  72  73  74 ...\n#&gt;  [76] 76  77  78  79  80  81  82  83  84  85  86  87  88  89 ...\n#&gt;  [91] 91  92  93  94  95  96  97  98  99  100 101 102 103 104...\n#&gt; [106] 106 107 108 109 110 111 112 113 114 115 116 117 118 119...\n#&gt; [121] 121 122 123 124 125 126 127 128 129 130 131 132 133 134...\n#&gt; [136] 136 137 138 139 140 142 143 144 145 146 147 148 149 150...\n#&gt; + ... omitted several vertices\n\nHasonlóan használhatjuk a tail_of() függvényt azon csúcsok meghatározására, amelyekből él indul ki:\n\nto_g &lt;- tail_of(g, E(g)) # a gráf összes élének kezdőpontja\nto_g\n#&gt; + 184/187 vertices, named, from 9c4708b:\n#&gt;   [1] 45  45  172 180 45  180 42  45  182 45  182 45  12  181...\n#&gt;  [16] 181 181 175 181 181 181 45  45  22  22  45  10  180 31 ...\n#&gt;  [31] 45  45  45  181 182 34  182 17  45  93  180 178 42  45 ...\n#&gt;  [46] 45  45  10  17  8   31  17  17  17  17  45  56  45  58 ...\n#&gt;  [61] 186 11  19  45  64  64  11  179 54  180 10  12  180 45 ...\n#&gt;  [76] 5   180 181 179 78  39  45  82  82  44  1   47  47  12 ...\n#&gt;  [91] 93  93  45  183 10  97  45  64  11  47  7   21  37  58 ...\n#&gt; [106] 42  19  106 12  18  34  21  31  78  16  45  116 116 116...\n#&gt; [121] 11  188 7   7   7   37  106 7   7   56  56  14  18  78 ...\n#&gt; [136] 17  16  34  4   6   145 145 145 45  172 18  14  39  148...\n#&gt; + ... omitted several vertices\n\nÉrdekességként keressük meg azokat az éleket, amelyekből indul ki él, de egy él sem vezet. A setdiff() függvény a halmazelméleti különbséget valósítja meg, egészen pontosan a gráf összes élének kezdőpontjából (to_g) kivonjuk a gráf összes élének végpontját (ho_g). Ha a csomópontok címkéivel akarjuk elvégezni a műveletet, akkor a name argumentumot is használjuk a különbségképzés során.\n\n# olyan csúcsok, amelyekbe nem vezet be él\nsetdiff(to_g$name, ho_g$name)\n#&gt; [1] \"184\" \"174\" \"173\"\n\nA fenti outputban látható, hogy 3 ilyen csúcsunk van. Amennyiben szeretnénk ezt a 3 csúcsot kiemelni a megjelenítés során, akkor a címkék színét állítsuk be.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% setdiff(to_g$name, ho_g$name)] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n3.2.2 Adott csúcs éleinek azonosítása\nAz egyes élek azonosítása is lehetséges. Megvizsgálhatjuk, hogy létezik-e él két csúcs között, valamint megkereshetjük az összes olyan csúcsot, amelyek bármelyik irányban kapcsolódnak egy adott csúcshoz.\nElőször ellenőrizzük le, hogy vezet-e él egyik, illetve másik irányban a 184-es csúcs és a 178-as csúcs között. A csúcsok indexelésekor szögletes zárójelet ([) használjuk és a csúcs nevét idézőjelbe kell tenni, még akkor is, ha az szám. Ha az indexelés eredménye 1 (IGAZ), akkor az azt jelzi, akkor vezet irányított él. Ha 0-t (FALSE) kapunk, akkor nem vezet irányított él.\n\n# Van-e irányított él a 184-es csúcstól 178-as csúcshoz\ng['184', '178']\n#&gt; [1] 1\n\n\n# Van-e irányított él a 178-as csúcstól 184-es csúcshoz\ng['178', '184']\n#&gt; [1] 0\n\nAz incident() függvény segítségével azonosítjuk azokat az éleket, amelyek például a 184-es csúcsból bármelyik irányba mennek, vagy azokat, amelyek a 184-es csúcsból indulnak ki. Az első argumentum a gráf objektum, a második a vizsgálandó csúcs, a harmadik argumentum pedig a mód, amely az irányt jelzi.\n\n# Az összes olyan él, amiben a 184-es csúcs szerepel\nincident(g, '184', mode = \"all\")\n#&gt; + 6/184 edges from 9c4708b (vertex names):\n#&gt; [1] 184-&gt;45  184-&gt;182 184-&gt;181 184-&gt;178 184-&gt;183 184-&gt;177\n\n\n# Az összes olyan él, amely a 184-es csúcsból indul ki\nincident(g, '184', mode = \"out\")\n#&gt; + 6/184 edges from 9c4708b (vertex names):\n#&gt; [1] 184-&gt;45  184-&gt;182 184-&gt;181 184-&gt;178 184-&gt;183 184-&gt;177\n\n\n# Az összes olyan él, amely a 184-es csúcsba vezet\nincident(g, '184', mode = \"in\")\n#&gt; + 0/184 edges from 9c4708b (vertex names):\n\n\n3.2.2.1 Feladat\n\nHozzuk létre a következő gráfot, írassuk ki a szomszédsági mátrixát, a degree() függvénnyel a fokszámokat, az átlagos fokszámot és a degree.distribution() függvénnyel a fokszámeloszlást.\n\n\n\n\n\n\nHozzuk létre a fenti irányított gráfot:\n\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                1, 2,\n                3, 1,\n                3, 2,\n                2, 4\n)\nfriends.mat &lt;- as.matrix(friends)\ngs1 &lt;- graph.edgelist(friends.mat, directed = TRUE)\n# A hálózat megjelenítése\nplot(gs1)\n\n\n\n\nSzomszédsági mátrix:\n\nas_adjacency_matrix(gs1)\n#&gt; 4 x 4 sparse Matrix of class \"dgCMatrix\"\n#&gt;             \n#&gt; [1,] . 1 . .\n#&gt; [2,] . . . 1\n#&gt; [3,] 1 1 . .\n#&gt; [4,] . . . .\n\n\nV(gs1) # a csúcsok száma és megnevezése\n#&gt; + 4/4 vertices, from 9dab97b:\n#&gt; [1] 1 2 3 4\nE(gs1) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 4/4 edges from 9dab97b:\n#&gt; [1] 1-&gt;2 3-&gt;1 3-&gt;2 2-&gt;4\necount(gs1) # élek száma\n#&gt; [1] 4\nvcount(gs1) # csúcsok száma\n#&gt; [1] 4\nis.directed(gs1) # irányított gráf?\n#&gt; [1] TRUE\n\nA csúcsok fokszáma, a bemenő és kimenő éleket külön-külön is számolva:\n\ndegree(gs1) \n#&gt; [1] 2 3 2 1\ndegree(gs1, mode = \"all\") \n#&gt; [1] 2 3 2 1\ndegree(gs1, mode = \"in\") \n#&gt; [1] 1 2 0 1\ndegree(gs1, mode = \"out\") \n#&gt; [1] 1 1 2 0\nd_degree &lt;- data.frame(degre_all=degree(gs1, mode = \"all\"),\n                       degre_in=degree(gs1, mode = \"in\"),\n                       degre_out=degree(gs1, mode = \"out\"))\nd_degree\n#&gt;   degre_all degre_in degre_out\n#&gt; 1         2        1         1\n#&gt; 2         3        2         1\n#&gt; 3         2        0         2\n#&gt; 4         1        1         0\n\nA fokszámok átlaga:\n\nmean(degree(gs1)) \n#&gt; [1] 2\n\nA fokszámeloszlás:\n\ndegree.distribution(gs1) \n#&gt; [1] 0.00 0.25 0.50 0.25"
  },
  {
    "objectID": "03_fontos_csucsok.html#csúcsok-közötti-kapcsolatok",
    "href": "03_fontos_csucsok.html#csúcsok-közötti-kapcsolatok",
    "title": "3  Fontos csúcsok",
    "section": "3.3 Csúcsok közötti kapcsolatok",
    "text": "3.3 Csúcsok közötti kapcsolatok\nA fejezetben használt {igraph} függvények:\n\nneighbors() - szomszédos csúcsok feltárása\nfarthest_vertices() - a hálózat átmérőjét meghatározó út első és utolsó csúcsa\nget_diameter() - megmutatja az útvonalat a két egymástól legtávolabbi csúcs között\ndiameter() - a hálózat átmérője\nego() - azok a csúcsok, amelyek egy adott csúcstól \\(N\\) kapcsolaton belül elérhetők\n\nA hálózatelemzés során a csúcsok közötti kapcsolatok mintázatának feltárása központi jelentőségű. Ennek egyik módja, hogy első lépésben azonosítjuk az egyes csúcsok szomszédos csúcsait, majd azt is meghatározhatjuk, hogy mely szomszédos csúcsokon osztoznak a nem összekapcsolt csúcsok. Ez utóbbi annak a lehetőségét mutatja meg, hogy két csúcsnak miként lehet közvetett kapcsolata más csúcsokon keresztül.\n\n3.3.1 Szomszédok\nA neighbors() függvény segítségével azonosíthatjuk azokat a csúcsokat, amelyek bármilyen módon kapcsolódnak például a 12-es csúcshoz, vagy azokat a csúcsokat, amelyek egy élt a 12-es csúcshoz irányítanak, és azokat is, amelyek a 12-es csúcsból indulnak.\n\n# irányítottságtól függetlenül a 12 csúcs szomszédai\nneighbors(g, '12', mode = \"all\")\n#&gt; + 5/187 vertices, named, from 9c4708b:\n#&gt; [1] 45  13  72  89  109\n\n# a 12-es csúcsba futó élek kiinduló csúcsai\nneighbors(g, '12', mode = \"in\")\n#&gt; + 1/187 vertex, named, from 9c4708b:\n#&gt; [1] 45\n\n# a 12-es csúcsból kifelé vezető élek\nneighbors(g, '12', mode = \"out\")\n#&gt; + 4/187 vertices, named, from 9c4708b:\n#&gt; [1] 13  72  89  109\n\nMeghatározhatjuk azt is, hogy például a 42 és 124 csúcsoknak van-e közös szomszédjuk! Hozzunk létre egy n1 vektort azoknak a csúcsoknak, amelyekbe él vezet a 42-es csúcsból, és egy n2 vektort azoknak a csúcsoknak, amelyek egy élt a 124-es csúcshoz irányítanak. Ezután használjuk az intersection() függvényt, amely meghatározza, hogy vannak-e közös csúcsok az n1-ben és az n2-ben.\n\n# az összes olyan csúcs, amely a 42-es csúcsból induló élen végpont és egyben a 124-es csúcshoz irányuló élek kezdőcsúcsa\nn1 &lt;- neighbors(g, '42', mode = 'out')\nn2 &lt;- neighbors(g, '124', mode = 'in')\nintersection(n1, n2)\n#&gt; + 1/187 vertex, named, from 9c4708b:\n#&gt; [1] 7\n\nLátható, hogy van egyetlen olyan csúcs (7), amelyen keresztül a 42-es csúcsból eljuthatunk a 124-es csúcsba.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% c('42', '7', '124')] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n3.3.2 A csúcsok közötti távolságok\nEgy hálózat összekapcsoltságának egyik mutatója lehet, ha megállapítjuk az összes csúcspár közötti utak hosszát. Az út egyszerűen a csúcsok közötti kapcsolatok láncolata. A két csúcs közötti élek száma a csúcsok közötti távolságot jelenti. Ha egy csúcs elérhető a szomszédjától, akkor a köztük lévő úthossz 1, vagyis az egymáshoz kapcsolódó csúcsok távolsága 1. Azok a csúcsok, amelyeknek közös szomszédjuk van, de nem kapcsolódnak egymáshoz, a távolságuk 2 és így tovább. Irányított hálózatokban az élek iránya is figyelembe vehető. Ha két csúcsot nem lehet elérni egymást követő irányított éleken keresztül, akkor a távolság végtelen.\nA hálózatelemzés során általában az érdekel bennünket, hogy az adott hálózatban melyik a leghosszabb ilyen út. Ezt a hálózat átmérőjének is nevezik.\nElsőként vizsgáljuk meg a hálózat csúcsai közötti leghosszabb útvonalakat, majd azokat a csúcsokat keressük, amelyek egy adott csúcs \\(n\\) kapcsolatán belül vannak. A betegségátviteli hálózatok esetében (mint a példánkban szereplő kanyaró adatkészlet esetében) ez segít azonosítani, hogy milyen gyorsan terjed a betegség a hálózaton keresztül.\nA hálózat leghosszabb útvonalának hosszát a farthest_vertices() függvény segítségével kérhetjük el.\n\n# Melyik két csúcs van a legtávolabb egymástól a gráfban?\nfarthest_vertices(g) \n#&gt; $vertices\n#&gt; + 2/187 vertices, named, from 9c4708b:\n#&gt; [1] 184 162\n#&gt; \n#&gt; $distance\n#&gt; [1] 5\n\nAz outputban megjelenik a megtalált út kezdő- és végpontja, valamint az út hossza is.\nAz út hosszát a diameter() függvény külön is megmutatja.\n\n# a hálózat átmérője\ndiameter(g)\n#&gt; [1] 5\n\nMagát az útvonalat is azonosíthatjuk a get_diameter() függvény segítségével. Ez az út összes csúcspontját tartalmazza, így esetünkben azt az utat mutatja, amely a legtávolabb lévő gyermekekhez vezet, akikhez a betegség eljutott a hálózaton keresztül.\n\n# Megmutatja az útvonalat a két egymástól legtávolabbi csúcs között\nget_diameter(g)  \n#&gt; + 6/187 vertices, named, from 9c4708b:\n#&gt; [1] 184 178 42  7   123 162\n\nJelenítsük meg ezt az utat.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% get_diameter(g)$name] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n3.3.3 N lépésben elérhető csúcsok azonosítása\nAz ego() függvény segítségével azonosítani tudjuk az összes olyan csúcsot, amely az adott csúcsból maximum \\(n\\) lépésben elérhető.\nPéldául az ego() segítségével keressük meg az összes olyan csúcsot, amely a 42-es csúcstól 2 távolságon belül elérhető, majd azokat, amelyek két távolságon belül elérhetik a 42-es csúcsot. Az ego() első argumentuma a gráfobjektum, a második argumentum a csúcsok közötti kapcsolatok maximális száma, a harmadik argumentum a kívánt csúcs, a negyedik argumentum pedig azt határozza meg, hogy kimenő vagy bejövő élről van szó.\n\n# Azok a csúcsok, amelyek a 42-es csúcstól két kapcsolaton belül elérhetők.\nego(g, 2, '42', mode = 'out')\n#&gt; [[1]]\n#&gt; + 13/187 vertices, named, from 9c4708b:\n#&gt;  [1] 42  7   106 43  123 101 120 124 125 128 129 108 127\n\n# Azok a csúcsok, amelyek két kapcsolaton belül elérhetik a 42-es csúcsot.\nego(g, 2, '42', mode = 'in')\n#&gt; [[1]]\n#&gt; + 3/187 vertices, named, from 9c4708b:\n#&gt; [1] 42  178 184\n\nAzok a csúcsok, amelyek a 42-es csúcstól két kapcsolaton belül elérhetők.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% ego(g, 2, '42', mode = 'out')[[1]]$name] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\nAzok a csúcsok, amelyek két kapcsolaton belül elérhetik a 42-es csúcsot.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% ego(g, 2, '42', mode = 'in')[[1]]$name] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )"
  },
  {
    "objectID": "03_fontos_csucsok.html#fontos-és-befolyásos-csúcsok",
    "href": "03_fontos_csucsok.html#fontos-és-befolyásos-csúcsok",
    "title": "3  Fontos csúcsok",
    "section": "3.4 Fontos és befolyásos csúcsok",
    "text": "3.4 Fontos és befolyásos csúcsok\nA fejezetben használt {igraph} függvények:\n\ndegree() - fokszám centralitás kiszámítása az egyes csúcsokra\nbetweenness() - közöttiség centralitás kiszámítása az egyes csúcsokra\ncloseness() - közelség centralitás kiszámítása az egyes csúcsokra\nmake_ego_graph() - részgráf készítése egy csúcstól adott távolságra lévő csúcsokkal\ndistances() - a legrövidebb út két csúcs között\n\nA hálózatelemzésben különböző mérőszámok születtek a csúcsok fontosságának számszerűsítésére, ezeket centralitásnak vagy központiságnak nevezzük. Ezek segítségével olyan kérdésekre válaszolhatunk, hogy egy osztályközösségben ki a hangadó, mennyire értékes gey weboldal, mely gének törlése járhat hallos következménnyel egy génszabályozó hálózatban, mennyire kritikus az adott router egy internetes hálózatban.\nItt 3 centralitási mutatóról lesz szó:\n\nFokszám centralitás (degree centrality)\nKözöttiség centralitás (betweenness centrality)\nKözelség centralitás (closeness centrality)\n\nSzámos módszer létezik annak meghatározására, hogy mely csúcsok lehetnek a legfontosabbak vagy a legbefolyásosabbak. Például fontosnak tarthatunk egy olyan csúcsot, amelynek sok kapcsolata van, azaz magas a fokszáma van. Azokat a csúcsokat még nagyobb befolyásúnak tekinthetjük, amelyek olyan más csúcsokhoz kapcsolódnak, amelyek maguk is erősen összekapcsolódnak a hálózatban. Ezek olyan csúcsok, amelyek nagy sajátvektor-centralitásúak. Számos más módszer is létezik a befolyás kiszámítására, beleértve a közelség és a laprangsorok központiságát. A következő gyakorlatban ezek közül kettőre fogsz összpontosítani: a mértékre és a közöttiségre.\n\n3.4.1 Fokszám centralitás\nA csúcs fontosságának talán legegyszerűbb mértéke a csúcs foka. Egy csúcs kifoka (out-degree) azoknak a csúcsoknak a száma, amelyekre egy csúcsnak kimenő éle van. A befok (in-degree) a többi egyedtől ide vezető élek száma. A kanyaróhálózatban azok az egyének, akik sok más egyedet megfertőznek, magas kifokkal rendelkeznek.\nÉrdekes kérdés lehet, hogy az egyének azonos mennyiségben fertőznek-e meg más gyerekeket, vagy vannak esetleg olyan kulcsfontosságú gyerekek is, akiknek magas a kifokuk, vagyis sok más gyereket is megfertőztek.\nSzámítsuk ki az egyes csúcsok kimenő fokát degree() függvény segítségével. Az első argumentum a hálózati gráf objektum, a második argumentum pedig a mód (out, in vagy all). A függvény kimenetét a g.outd objektumhoz rendeljük.\n\n# Számítsuk ki az egyes csúcsok kimenő fokát\ng.outd &lt;- degree(g, mode = \"out\")\ng.outd\n#&gt;  45 172 180  42 182  12 181 175  22  10  31  34  17  93 178 184 \n#&gt;  30   2   7   3   4   4   8   2   2   4   3   3   7   4   1   6 \n#&gt;   8  56  58 186  11  19  64 179  54  74   5  78  39  82  44   1 \n#&gt;   1   3   3   1   4   2   3   2   1   2   1   3   2   4   1   1 \n#&gt;  47 183  97   7  21  37 106  18  16 116 188  14  79   4   6 145 \n#&gt;   3   1   1   7   2   3   2   3   2   3   1   2   1   1   1   3 \n#&gt; 148 153  73 156  68 123 102 110  98 169 174 173 146 177   2   3 \n#&gt;   2   6   1   2   1   2   2   1   1   1   1   1   1   2   0   0 \n#&gt;   9  13  15  20  23  24  25  26  27  28  29  30  32  33  35  36 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  38  40  41  43  46  48  49  50  51  52  53  55  57  59  60  61 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  62  63  65  66  67  69  70  71  72  75  76  77  80  81  83  84 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  85  86  87  88  89  90  91  92  94  95  96  99 100 101 103 104 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 105 107 108 109 111 112 113 114 115 117 118 119 120 121 122 124 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 142 143 144 147 149 150 151 152 154 155 157 158 159 160 161 162 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 163 164 165 166 167 168 170 171 176 185 187 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0\n\nTekintsük meg az összes egyedi kimenő fokot table() függvény segítségével a g.outd vektorobjektum alapján.\n\n# gyakorisági táblázat\ntable(g.outd)\n#&gt; g.outd\n#&gt;   0   1   2   3   4   6   7   8  30 \n#&gt; 125  21  16  12   6   2   3   1   1\n\nLátható, hogy van egy olyan gyerek, aki 30 más gyermeket fertőzött meg.\nKészítsünk hisztogramot a kimenő fokokról a hist() függvény segítségével a g.outd vektorobjektum alapján.\n\n# Készítsünk hisztogramot a kimenő fokokról\nhist(g.outd, breaks = 30)\n\n\n\n\nHatározzuk meg, hogy a g.outd vektorobjektumon a which.max() függvény segítségével melyik csúcsnak van a legmagasabb kimenő foka a hálózatban.\n\n# Keresse meg azt a csúcsot, amelyiknek a maximális kimenő foka van\nwhich.max(g.outd)\n#&gt; 45 \n#&gt;  1\n\nJelenítsük meg ábrán is.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% '45'] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\nJelenítsük meg a példa kedvéért az első három legmagasabb fokszámmal rendelkező csúcsot.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% names(sort(degree(g, mode = \"out\"), decreasing = T)[1:3])] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n3.4.2 Közöttiség centralitás\nEgy adott csúcs fontosságának másik mércéje a közöttiség centralitás. A mutató kifejezi, hogy egy csúcs milyen gyakran fekszik a hálózat bármely két csúcsa közötti legrövidebb úton. Könnyen elképzelhető, hogy egy ilyen csúcs mennyire kritikus a hálózaton keresztüli információáramlás szempontjából. A nagy közöttiség centralitással rendelkező egyének kulcsfontosságú hidak a hálózat különböző részei között. A kanyaróátviteli hálózatunkban magas értékkel rendelkeznek azok a gyerekek, akik központi szerepet játszottak a betegség átvitelében a hálózat más részeire.\nHatározzuk meg a közöttiség centralitás értékét minden csúcsra a betweenness() függvény segítségével. Az argumentumban meg kell adnunk, hogy most irányított hálózatról van szó: directed = TRUE. Az eredményt mentsük el a g.b objektumba.\n\n# Közöttiség centralitás minden csúcsra\ng.b &lt;- betweenness(g, directed = TRUE)\ng.b\n#&gt;  45 172 180  42 182  12 181 175  22  10  31  34  17  93 178 184 \n#&gt;  89   3  20  28  11   8  34   7   4   8   6   6  16   8  15   0 \n#&gt;   8  56  58 186  11  19  64 179  54  74   5  78  39  82  44   1 \n#&gt;   2   6   6   2   8   4   8   8   3   4   2   6   4   8   2   2 \n#&gt;  47 183  97   7  21  37 106  18  16 116 188  14  79   4   6 145 \n#&gt;   6   1   2  27   8   6   6   8   4   6   2   8   3   3   3   6 \n#&gt; 148 153  73 156  68 123 102 110  98 169 174 173 146 177   2   3 \n#&gt;   6  14   3   4   3   8   6   3   3   3   0   0   2  16   0   0 \n#&gt;   9  13  15  20  23  24  25  26  27  28  29  30  32  33  35  36 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  38  40  41  43  46  48  49  50  51  52  53  55  57  59  60  61 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  62  63  65  66  67  69  70  71  72  75  76  77  80  81  83  84 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  85  86  87  88  89  90  91  92  94  95  96  99 100 101 103 104 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 105 107 108 109 111 112 113 114 115 117 118 119 120 121 122 124 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 142 143 144 147 149 150 151 152 154 155 157 158 159 160 161 162 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 163 164 165 166 167 168 170 171 176 185 187 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0\n\nÁbrán is vizsgáljuk meg a közöttiség centralitás pontszámok eloszlását a hist() függvény segítségével.\n\n# Hisztogram közöttiség centralitásra\nhist(g.b, breaks = 80)\n\n\n\n\nA plot() segítségével elkészíthetjük a hálózat diagramját a közöttiségi pontszámok alapján. A csúcscímkék megjelenését NA-val nyomjuk el. A csúcsméret attribútum induljon 1-ről, plusz a g.b közöttiségi pontszámok négyzetgyöke. A négyzetgyök függvényre azért van szükség (az egyszerű összegzés helyett), mert ebben a hálózatban óriási különbségek vannak a közöttiségi pontszámok között, a pontszámok ilyen módon történő normalizálása biztosítja, hogy minden csomópont áttakinthető maradjon, de relatív fontosságuk továbbra is azonosítható legyen.\n\n# ábra a közöttiségi mutató szemléltetésével\nplot(g, \n     vertex.label = NA,\n     edge.color = 'black',\n     vertex.size = sqrt(g.b)+1,\n     edge.arrow.size = 0.05,\n     layout = layout_nicely(g))\n\n\n\n\nA hagyományos megjelenítéssel is emeljük ki a 3 legnagyobb közöttiségi mutatóval rendelkező csúcsot.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% names(sort(betweenness(g, directed = T), decreasing = T)[1:3])] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n3.4.3 Közelség centralitás\nA közelségi mérőszám az összes többi csúcshoz való közelséggel ragadja meg a központiságot, vagyis az a “központi” csúcs, amely sok más csúcshoz “közel” van. A standard megközelítés szerint kiszámoljuk egy csúcs összesített távolságát az összes többi csúcstól, majd vesszük az összeg reciprokát.\nA közelségi mutatót a closeness() függvénnyel számítjuk ki, amelynek első paramétere a gráf, a második pedig a mode=, amelynek csak irányított gráfok esetén van jelentősége. Alapértelmezett értéke out, amely irányított gráfban a csúcsból kivezető élek segítségével méri csak a többi csúcshoz vezető élek távolságát. A legtöbbször erre van szükségünk, jelen esetben is.\n\n# Közelségi centralitás\ng.c &lt;- closeness(g, mode = \"out\")\ng.c\n#&gt;          45         172         180          42         182 \n#&gt; 0.006666667 0.250000000 0.076923077 0.037037037 0.055555556 \n#&gt;          12         181         175          22          10 \n#&gt; 0.250000000 0.015384615 0.076923077 0.500000000 0.250000000 \n#&gt;          31          34          17          93         178 \n#&gt; 0.333333333 0.333333333 0.111111111 0.250000000 0.023809524 \n#&gt;         184           8          56          58         186 \n#&gt; 0.002070393 1.000000000 0.333333333 0.333333333 1.000000000 \n#&gt;          11          19          64         179          54 \n#&gt; 0.250000000 0.500000000 0.200000000 0.166666667 1.000000000 \n#&gt;          74           5          78          39          82 \n#&gt; 0.500000000 1.000000000 0.333333333 0.500000000 0.250000000 \n#&gt;          44           1          47         183          97 \n#&gt; 1.000000000 1.000000000 0.333333333 1.000000000 1.000000000 \n#&gt;           7          21          37         106          18 \n#&gt; 0.090909091 0.166666667 0.333333333 0.500000000 0.200000000 \n#&gt;          16         116         188          14          79 \n#&gt; 0.500000000 0.333333333 1.000000000 0.166666667 1.000000000 \n#&gt;           4           6         145         148         153 \n#&gt; 1.000000000 1.000000000 0.333333333 0.500000000 0.125000000 \n#&gt;          73         156          68         123         102 \n#&gt; 1.000000000 0.500000000 1.000000000 0.500000000 0.500000000 \n#&gt;         110          98         169         174         173 \n#&gt; 1.000000000 1.000000000 1.000000000 0.125000000 0.047619048 \n#&gt;         146         177           2           3           9 \n#&gt; 1.000000000 0.028571429         NaN         NaN         NaN \n#&gt;          13          15          20          23          24 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          25          26          27          28          29 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          30          32          33          35          36 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          38          40          41          43          46 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          48          49          50          51          52 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          53          55          57          59          60 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          61          62          63          65          66 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          67          69          70          71          72 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          75          76          77          80          81 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          83          84          85          86          87 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          88          89          90          91          92 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          94          95          96          99         100 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         101         103         104         105         107 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         108         109         111         112         113 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         114         115         117         118         119 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         120         121         122         124         125 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         126         127         128         129         130 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         131         132         133         134         135 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         136         137         138         139         140 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         142         143         144         147         149 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         150         151         152         154         155 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         157         158         159         160         161 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         162         163         164         165         166 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         167         168         170         171         176 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         185         187 \n#&gt;         NaN         NaN\n\nNe felejtsük, hogy közelségi mutató esetén a kisebb érték jelenti a nagyobb fontosságot. Emeljük ki a három befolyásos csúcsot, amelyet a közelségi mutató alapján határozunk meg.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% names(sort(closeness(g, mode = \"out\"))[1:3])] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n3.4.3.1 Feladat\n\nKészítsük el a következő irányított gráfot.\n\nVizsgáljuk meg a gráf irányítottságát és súlyozottságát.\nTárjuk fel a fokszámokat, vegyük figyelembe a kifokokat és a befokokat is.\nVizsgáljuk meg, hogy van-e él A és E kozött.\nHatározzuk meg az összes olyan élt, amely A-ból indul, vagy A-ba vezet.\nHatározzuk meg az összes kezdőcsúcsot a teljes hálózatban.\nHatározzuk meg az F összes szomszédját.\nHatározzuk meg az F és D összes közös szomszédját.\nHatározzuk meg a leghosszabb utat a gráfban. Emeljük ki ábrán.\nHatározzuk meg az F-től legfeljebb 2 távolságra lévő csúcsokat. Emeljük ki ábrán.\nSzámoljuk ki a fokszám, közöttiségi és közelségi centralitást.\n\n\n\n\n\n\n\nHozzuk létre a fenti irányított gráfot. Figyeljünk a színezésre is:\n\ngs1 &lt;- graph_from_literal(B--+A--+E--+H--+F--+G, \n                          I--+F, \n                          F--+E, \n                          F--+A, \n                          J--+D--+A, \n                          K--+D,\n                          L--+C--+A)\nV(gs1)$color &lt;- \"#FE8484\"\nplot(gs1,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     edge.arrow.size = .5,\n     layout = layout_nicely(gs1))\n\n\n\n\nFeltárjuk a fokszámokat:\n\nd_degree &lt;- data.frame(degre_all=degree(gs1, mode = \"all\"),\n                       degre_in=degree(gs1, mode = \"in\"),\n                       degre_out=degree(gs1, mode = \"out\"))\nd_degree\n#&gt;   degre_all degre_in degre_out\n#&gt; B         1        0         1\n#&gt; A         5        4         1\n#&gt; E         3        2         1\n#&gt; H         2        1         1\n#&gt; F         5        2         3\n#&gt; G         1        1         0\n#&gt; I         1        0         1\n#&gt; J         1        0         1\n#&gt; D         3        2         1\n#&gt; K         1        0         1\n#&gt; L         1        0         1\n#&gt; C         2        1         1\n\nVizsgáljuk meg, hogy van-e él A és E kozött:\n\ngs1['A', 'E'] # van él?\n#&gt; [1] 1\n\nHatározzuk meg az összes olyan élt, amely A-ból indul, vagy A-ba vezet.\n\nincident(gs1, 'A', mode = \"all\")\n#&gt; + 5/13 edges from 9f08272 (vertex names):\n#&gt; [1] B-&gt;A A-&gt;E F-&gt;A D-&gt;A C-&gt;A\n\nHatározzuk meg az összes kezdőcsúcsot a teljes hálózatban:\n\ntail_of(graph = gs1, es = E(gs1))\n#&gt; + 13/12 vertices, named, from 9f08272:\n#&gt;  [1] B A E H F F F I J D K L C\n\nHatározzuk meg az F összes szomszédját:\n\nneighbors(gs1, \"F\", mode = \"all\")\n#&gt; + 5/12 vertices, named, from 9f08272:\n#&gt; [1] A E H G I\n\nHatározzuk meg az F és D összes közös szomszédját.\n\nx &lt;- neighbors(gs1, \"F\", mode = \"all\")\ny &lt;- neighbors(gs1, \"D\", mode = \"all\")\nintersection(x, y)\n#&gt; + 1/12 vertex, named, from 9f08272:\n#&gt; [1] A\n\nHatározzuk meg a leghosszabb utat a gráfban:\n\nfarthest_vertices(gs1)\n#&gt; $vertices\n#&gt; + 2/12 vertices, named, from 9f08272:\n#&gt; [1] J G\n#&gt; \n#&gt; $distance\n#&gt; [1] 6\nget_diameter(gs1)\n#&gt; + 7/12 vertices, named, from 9f08272:\n#&gt; [1] J D A E H F G\n\nEmeljük ki a leghosszabb utat a gráfban:\n\npath &lt;- shortest_paths(graph = gs1, from = farthest_vertices(gs1)$vertices[1],\n               to = farthest_vertices(gs1)$vertices[2], output = \"both\")\nE(gs1)$color &lt;- ifelse(unlist(E(gs1)) %in% unlist(path$epath), 'blue', 'black')\nplot(gs1,\n     vertex.label.color = \"black\",\n     vertex.label.cex = 0.9,\n     vertex.size = 18,\n     edge.arrow.size = .5,\n     layout = layout_nicely(gs1))\n\n\n\n\nHatározzuk meg az F-től legfeljebb 2 távolságra lévő csúcsokat:\n\nego(gs1, 2, 'F', mode = 'all')\n#&gt; [[1]]\n#&gt; + 9/12 vertices, named, from 9f08272:\n#&gt; [1] F A E H G I B D C\n\nEmeljük ki az F-től legfeljebb 2 távolságra lévő csúcsokat:\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", vcount(graph = gs1))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[unlist(V(gs1)) %in% unlist(ego(gs1, 2, 'F', mode = 'all'))] &lt;- \"white\"\n\nplot(gs1,\n     vertex.label.color = vlc,\n     vertex.label.cex = 0.9,\n     edge.color = 'black',\n     vertex.size = 18,\n     edge.arrow.size = .5,\n     layout = layout_nicely(gs1))\n\n\n\n\nSzámoljuk ki a fokszám, közöttiségi és közelségi centralitást:\n\ndegree(graph = gs1)\n#&gt; B A E H F G I J D K L C \n#&gt; 1 5 3 2 5 1 1 1 3 1 1 2\nbetweenness(graph = gs1, directed = T)\n#&gt;  B  A  E  H  F  G  I  J  D  K  L  C \n#&gt;  0 24 23 17 16  0  0  0 10  0  0  5\nround(betweenness(graph = gs1, directed = T, normalized = T), 2)\n#&gt;    B    A    E    H    F    G    I    J    D    K    L    C \n#&gt; 0.00 0.22 0.21 0.15 0.15 0.00 0.00 0.00 0.09 0.00 0.00 0.05\ncloseness(graph = gs1, mode = \"out\")\n#&gt;          B          A          E          H          F       ...\n#&gt; 0.06666667 0.10000000 0.11111111 0.14285714 0.20000000       ...\n#&gt;          I          J          D          K          L       ...\n#&gt; 0.10000000 0.04761905 0.06666667 0.04761905 0.04761905 0.0666...\n\n\n\n\n3.4.4 Fontos csomópontok és élek megjelenítése\nA kanyaró adatkészlettel kapcsolatos egyik probléma az, hogy három személyről nincs információ arról, hogy ki fertőzte meg őket. Úgy tűnik, hogy ezen egyedek egyike (184-es csúcs) végső soron felelős a betegség sok más egyedre való terjesztéséért (a legkisebb a közelségi mutatója), még akkor is, ha nem fertőzött meg közvetlenül túl sok egyedet. Mivel azonban a 184-es csúcsnak nincs bejövő éle a hálózatban, úgy tűnik, hogy kicsi a közöttiségi mutatója.\n\n# a 10 legbefolyásosabb csúcs a fokszám centralitás alapján\nsort(degree(g, mode = \"out\"), decreasing = T)[1:10]\n#&gt;  45 181 180  17   7 184 153 182  12  10 \n#&gt;  30   8   7   7   7   6   6   4   4   4\n\n\n# a 10 legbefolyásosabb csúcs a közöttiség centralitás alapján\nsort(betweenness(g, directed = T), decreasing = T)[1:10]\n#&gt;  45 181  42   7 180  17 177 178 153 182 \n#&gt;  89  34  28  27  20  16  16  15  14  11\n\n\n# a 10 legbefolyásosabb csúcs a közelség centralitás alapján\nsort(closeness(g, mode = \"out\"))[1:10]\n#&gt;         184          45         181         178         177 \n#&gt; 0.002070393 0.006666667 0.015384615 0.023809524 0.028571429 \n#&gt;          42         173         182         180         175 \n#&gt; 0.037037037 0.047619048 0.055555556 0.076923077 0.076923077\n\nA 184-es csúcs fontosságának feltárásának egyik módja az, ha vizualizáljuk az ettől az egyéntől kilépő kapcsolatok távolságait. Készítsünk ábrát, amely ezeket a távolságokat vizualizálja a legkorábban dokumentált betegtől (index eset).\nA make_ego_graph() függvény segítségével létrehozhatjuk a hálózatunk azon részhalmazát, amely a 184-es csúcshoz kapcsolódó csúcsokból áll. Az első argumentum az eredeti g gráf. A második paraméter a kapcsolatok maximális száma, amelyet a diameter() segítségével állítunk a hálózat átmérőjére. A harmadik paraméter a kívánt csúcs, amely most a 184. Az utolsó argumentum a mód, amely ebben az esetben iránytól függetlenül minden csatlakozást engedélyez.\n\n# részgráf készítése\ng184 &lt;- make_ego_graph(graph = g, order = diameter(g), nodes = '184', mode = \"all\")[[1]]\n\nJelenítsük meg a kapott részgráfot.\n\nplot(g184, \n     vertex.label.color = \"black\", \n     edge.color = 'gray77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g184))\n\n\n\n\nHozzunk létre egy dists objektumot, amely minden csúcs távolságát tartalmazza a 184-es csúcstól. Használjuk a distances() függvényt ennek kiszámításához.\n\n# távolságokat tartalmazó objektum a 184 csúcstól\ndists &lt;- distances(g184, \"184\")\ndists\n#&gt;     45 180 42 182 12 181 22 10 31 34 17 93 178 184 8 56 58 18...\n#&gt; 184  1   2  2   1  2   1  2  2  2  2  2  2   1   0 2  2  2   ...\n#&gt;     19 64 179 54 74 5 78 39 82 44 1 47 183 97 7 21 37 106 16 116\n#&gt; 184  2  2   2  3  2 2  2  2  2  2 2  2   1  2 3  2  2   3  2   2\n#&gt;     14 79 4 6 145 148 153 73 156 68 123 102 98 169 177 2 9 13 15\n#&gt; 184  2  3 3 3   2   3   2  3   2  3   4   3  3   3   1 2 2  3  2\n#&gt;     20 23 24 25 26 27 28 29 30 32 33 35 36 38 40 41 43 46 48 ...\n#&gt; 184  2  2  3  3  2  3  3  3  2  2  2  2  3  3  3  3  3  2  3 ...\n#&gt;     51 52 53 55 57 59 60 61 62 63 65 66 67 69 70 71 72 75 76 ...\n#&gt; 184  3  3  3  3  3  3  3  3  3  3  3  3  3  4  3  3  3  3  3 ...\n#&gt;     81 83 84 85 86 87 88 89 90 91 92 94 95 96 99 100 101 103 104\n#&gt; 184  3  3  3  3  3  3  3  3  3  3  3  2  3  3  3   3   4   3   3\n#&gt;     105 107 108 109 111 112 113 114 115 117 118 119 120 121 124\n#&gt; 184   3   3   4   3   3   3   3   3   3   3   3   3   4   3   4\n#&gt;     125 126 127 128 129 130 131 132 134 135 136 137 138 139 140\n#&gt; 184   4   3   4   4   4   3   3   3   3   4   3   3   3   4   4\n#&gt;     142 143 144 149 150 151 152 154 155 157 158 159 160 161 162\n#&gt; 184   3   3   3   3   4   3   3   3   4   3   3   3   4   4   5\n#&gt;     163 164 165 166 168 170 171 185 187\n#&gt; 184   5   4   4   3   4   3   4   3   3\n\nHozzunk létre egy színpalettát, amely összesen hat színt tartalmaz. Az index esetnek is biztosítsunk színt (fekete), majd az egyes távolságoknak is adjunk egy-egy színt (tudjuk, a maximális távolság 5, ezért van szükség összesen hat színre). A célunk az, hogy az azonos távolságra lévő csúcsok azonos színnel legyenek ábrázolva, az index eset színe pedig legyen fekete.\n\n# színpaletta az egyes távolságoknak, plusz a 184-es csúcsnak\ncolors &lt;- c(\"black\", \"red\", \"orange\", \"blue\", \"dodgerblue\", \"cyan\")\n\nAdjuk meg a csúcsok color attribútumát, amely épp a 184-es csúcstól való távolságnak megfelelő színkód legyen. Tudjuk, hogy a dists objektumban a legkisebb érték 0 (ez épp a 184-es csúcs távolsága önmagától), legnagyobb értéke pedig 5. Ennek megfelelően a colors[dists+1] indexelés segítségével épp a megfelelő 6 színkódot tudjuk elérni a színpalettából.\n\n# Set color attribute to vertices of network g184.\nV(g184)$color &lt;- colors[dists+1]\n\nA plot() segítségével már könnyen megjeleníthetjük a gráfot. A csúcscímke legyen minden esetben a távolság (dists). Adjunk ábracímet is main= argumentum segítségével.\n\n# a 184-es esettől (index eset) kinduló részgráf megjelenítése a távolságok kiemelésével\nplot(g184, \n     vertex.label = dists, \n     vertex.label.color = \"white\",\n     vertex.label.cex = .8,\n     edge.color = 'black',\n     vertex.size = 8,\n     edge.arrow.size = .05,\n     main = \"Távolságok az index esettől (184)\"\n     )"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Hivatkozások",
    "section": "",
    "text": "Barabási, A.-L. (2011). Behálózva. A hálózatok új tudománya.\nHelikon Kiadó.\n\n\nCsányi, G., & Szendrői, B. (2004). Szociális hálózatok.\nBeszélő, 9(7). http://beszelo.c3.hu/cikkek/szocialis-halozatok\n\n\nCsermely, P. (2005). A rejtett hálózatok ereje. Vince Kiadó. http://linkgroup.semmelweis.hu/weaklinks_HU.php\n\n\nHoffman, T., Basa, B., & N. Kollár, K. (2022). Új sztenderdek a\nmagyar szociometriai gyakorlatban. https://doi.org/10.17627/ALKPSZICH.2022.1.67\n\n\nKürtösi, Z. (2011). Társadalmi kapcsolathálózatok elemzése (K.\nTakács, Ed.; pp. 19–31). BCE Szociológia és Társadalompolitika Intézet.\nhttps://unipub.lib.uni-corvinus.hu/4699/\n\n\nMérei, F. (1998). Közösségek rejtett hálózata. Osiris Kiadó.\n\n\nMolnár, L. (2020). A\nhálózatelemzés alapfogalmai\n gráfok, centralitás,\nszomszédosság, hidak és a kis világ. In Scientia rerum\npoliticarum (pp. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07"
  }
]