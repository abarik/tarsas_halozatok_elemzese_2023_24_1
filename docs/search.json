[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Társas hálózatok elemzése",
    "section": "",
    "text": "A kurzusról\nA hálózatkutatás bár a 2000-es években futott fel igazán a társadalomtudományokban, de a gyökerei már a szociológia kezdeteitől jelen voltak. A kurzus azt a célt tűzi ki, hogy a hallgatókat megismertesse a kapcsolathálózati és hálózatkutatási gondolkodás legfontosabb elméleti és módszertani alapvetéseivel. A kurzus során megismerkedhetnek a hallgatók az alapvető gráfelméleti fogalmakkal és a teljes hálózatokat elemző módszerekkel, valamint a szociometriai kutatási irányokkal is. Hangsúlyosan olyan tanulmányokat dolgozunk fel, amik a leginkább releváns hálózatelemzési kérdésekkel foglalkoznak. A kurzuson belül kitérünk a hazai hálózatkutatás legfrissebb eredményeire is."
  },
  {
    "objectID": "index.html#elérhetőség",
    "href": "index.html#elérhetőség",
    "title": "Társas hálózatok elemzése",
    "section": "Elérhetőség",
    "text": "Elérhetőség\nKérdés esetén email-ben vagyok elérhető, vagy fogadóórában állok rendelkezésre.\nabari.kalman@arts.unideb.hu"
  },
  {
    "objectID": "index.html#jegyszerzés",
    "href": "index.html#jegyszerzés",
    "title": "Társas hálózatok elemzése",
    "section": "Jegyszerzés",
    "text": "Jegyszerzés\nA félév során két ZH-t írnak a hallgatók. A két ZH alapján megajánlott jegyet kapnak. Aki nem írta meg a ZH-kat, vagy nem felel meg számára a megajánlott jegy, írásbeli vizsgát tehet a vizsgaidőszakban. Egyik ZH sem lehet elégtelen. A magyar nyelvű irodalmak kötelezők és tartalmuk a ZH-kon és a vizsgán számonkérhető, az angol nyelvű irodalmak csak ajánlottak.\nUgyan a végső jegy összetételét a két ZH 50-50%-ban meghatározza, de plusz százalékpontok gyűjthetők például házi feladatok, kiselőadások és órai aktivitás alapján. A végső jegy meghatározása a következő táblázat alapján történik:\n\nJegyszerzés\n\n\nEredmény\nMegajánlott jegy\n\n\n\n\n0–50%\nelégtelen\n\n\n51–60%\nelégséges\n\n\n61–74%\nközepes\n\n\n75–85%\njó\n\n\n86%–\njeles"
  },
  {
    "objectID": "index.html#a-kurzus-formája",
    "href": "index.html#a-kurzus-formája",
    "title": "Társas hálózatok elemzése",
    "section": "A kurzus formája",
    "text": "A kurzus formája\nA kurzus teljes mértékben gyakorlati jellegű, az önálló hálózatelemzéshez szükséges ismeretek elsajátítása a cél. A kurzus során az RStudio/R programcsomagot használjuk."
  },
  {
    "objectID": "index.html#szoftverek",
    "href": "index.html#szoftverek",
    "title": "Társas hálózatok elemzése",
    "section": "Szoftverek",
    "text": "Szoftverek\nA számítógépünkre telepítsük a következő szoftvercsomagokat:\n\nR - https://www.r-project.org/\nRStudio Desktop - https://posit.co/products/open-source/rstudio/\nR csomagok:\n\n\ninstall.packages(\"igraph\")\ninstall.packages(\"qgraph\")"
  },
  {
    "objectID": "index.html#olvasmányok",
    "href": "index.html#olvasmányok",
    "title": "Társas hálózatok elemzése",
    "section": "Olvasmányok",
    "text": "Olvasmányok\n\nKötelező:\n\nBarabási (2011)\nMérei (1998, o. 44–323)\nCsermely (2005, o. 1–4, 8 fejezetek)\n\nAjánlott olvasmányok\n\nMolnár (2020)\nHoffman és mtsai. (2022)"
  },
  {
    "objectID": "index.html#linkek",
    "href": "index.html#linkek",
    "title": "Társas hálózatok elemzése",
    "section": "Linkek",
    "text": "Linkek\n\nhttp://linkgroup.semmelweis.hu/docs/09-tarsadalmi-halok.pdf,\nhttp://szociogram.hu/blog/wp-content/uploads/2015/04/PedSzakpszichSzakdolgozatGyT.pdf\n\nCarolan, B. V. (2014). Social network analysis and education: Theory, methods and applications. Thousand Oaks, CA: SAGE Publications. (Note: Free access arranged through the UMN Library. Follow the link above.) Optional texts: Scott, J. (2013). Social network analysis (3rd ed.). Thousand Oaks, CA: SAGE Publications. Newman, M. (2018). Networks. Oxford University Press.\n\n\n\n\nBarabási, A.-L. (2011). Behálózva. A hálózatok új tudománya. Helikon Kiadó.\n\n\nCsermely, P. (2005). A rejtett hálózatok ereje. Vince Kiadó. http://linkgroup.semmelweis.hu/weaklinks_HU.php\n\n\nHoffman, T., Basa, B., & N. Kollár, K. (2022). Új sztenderdek a magyar szociometriai gyakorlatban. https://doi.org/10.17627/ALKPSZICH.2022.1.67\n\n\nMérei, F. (1998). Közösségek rejtett hálózata. Osiris Kiadó.\n\n\nMolnár, L. (2020). A hálózatelemzés alapfogalmai  gráfok, centralitás, szomszédosság, hidak és a kis világ. In Scientia rerum politicarum (o. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07"
  },
  {
    "objectID": "tematika.html#bevezetés-kedvcsináló",
    "href": "tematika.html#bevezetés-kedvcsináló",
    "title": "Tematika",
    "section": "Bevezetés, kedvcsináló",
    "text": "Bevezetés, kedvcsináló\n\nBarabási Albert-László: Behálózva - a hálózatok csodálatos világa.\nBehálózva 2.0 - Barabási Albert-László előadása.\nBarabási (2011, o. 7–14) (Bevezetés fejezet)\nCsányi & Szendrői (2004)"
  },
  {
    "objectID": "tematika.html#a-kapcsolathálózati-szemlélet.-gráfelméleti-alapok.",
    "href": "tematika.html#a-kapcsolathálózati-szemlélet.-gráfelméleti-alapok.",
    "title": "Tematika",
    "section": "A kapcsolathálózati szemlélet. Gráfelméleti alapok.",
    "text": "A kapcsolathálózati szemlélet. Gráfelméleti alapok.\n\nBarabási (2011, o. 15–47) (1-2. fejezet)\nMolnár (2020)\n\n\n\n\n\nBarabási, A.-L. (2011). Behálózva. A hálózatok új tudománya. Helikon Kiadó.\n\n\nCsányi, G., & Szendrői, B. (2004). Szociális hálózatok. Beszélő, 9(7). http://beszelo.c3.hu/cikkek/szocialis-halozatok\n\n\nMolnár, L. (2020). A hálózatelemzés alapfogalmai  gráfok, centralitás, szomszédosság, hidak és a kis világ. In Scientia rerum politicarum (o. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07"
  },
  {
    "objectID": "01_halozatok_R_ben.html#bevezetés-az-igraph-csomagba",
    "href": "01_halozatok_R_ben.html#bevezetés-az-igraph-csomagba",
    "title": "1  Hálózatok az R-ben",
    "section": "1.1 Bevezetés az igraph csomagba",
    "text": "1.1 Bevezetés az igraph csomagba\nSzámos szoftver képes hálózati adatokat feldolgozni, kezelni és megjeleníteni. Ebben a kurzusban a R/RStudio {igraph} csomagját fogjuk használni.\nEgy hálózat (vagy gráf) egy igraph objektumnak feletethető meg. Az fogjuk bemutatni, hogyan hozható létre új igraph objektum közvetlenül nyers adatokból. A használt függvények:\n\ngraph.edgelist() - hálózat létrehozása élek listájából\nplot() - hálózat megjelenítése\nV() - a csúcsok száma és megnevezése\nE() - az élek száma és az élek azonosítása csúcsokkal\ngsize() - az élek száma\ngorder() - a csúcsok száma\n\n\n1.1.1 igraph objektum létrehozása\nHogyan hozzunk létre igraph objektumot élek listájából? A következő adatok egy diákcsoportban fennálló barátságokat tárja fel. A friends adattábla minden sora egy élt (vagyis a barátság jelenlétét a két személy között) jelöl a hálózatban.\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n             \"Jessie\",  \"Sidney\",\n             \"Jessie\",   \"Britt\",\n             \"Sidney\",   \"Britt\",\n             \"Sidney\",  \"Donnie\",\n               \"Karl\",   \"Berry\",\n             \"Sidney\",    \"Rene\",\n              \"Britt\",    \"Rene\",\n             \"Shayne\",  \"Sidney\",\n             \"Sidney\",  \"Elisha\",\n             \"Sidney\", \"Whitney\",\n             \"Jessie\", \"Whitney\",\n             \"Donnie\",   \"Odell\",\n             \"Sidney\",   \"Odell\",\n               \"Rene\", \"Whitney\",\n             \"Shayne\",  \"Donnie\",\n             \"Jessie\",    \"Lacy\",\n               \"Rene\",    \"Lacy\",\n             \"Elisha\",  \"Eugene\",\n             \"Eugene\",    \"Jude\",\n              \"Berry\",   \"Odell\",\n              \"Odell\",  \"Rickie\",\n              \"Odell\",    \"Karl\",\n              \"Britt\",    \"Lacy\",\n             \"Elisha\",    \"Jude\",\n               \"Lacy\", \"Whitney\",\n              \"Britt\", \"Whitney\",\n               \"Karl\",   \"Tommy\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1  name2 \n#&gt;   &lt;chr&gt;  &lt;chr&gt; \n#&gt; 1 Jessie Sidney\n#&gt; 2 Jessie Britt \n#&gt; 3 Sidney Britt \n#&gt; 4 Sidney Donnie\n#&gt; 5 Karl   Berry \n#&gt; 6 Sidney Rene\n\nAz {igraph} csomag telepítése és betöltése.\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\nSzükséges technikai lépés, amely a friends adattáblát mátrixszá alakítja.\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\nAz igraph objektum létrehozása.\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\n\n1.1.2 Csúcsok és élek számolása\nEgy hálózatról számos információt lekérhetünk. Megszámolhatjuk a hálózat csúcsait és éleit.\nRészletes információ a csúcsokról.\n\nV(g) # a csúcsok száma és megnevezése\n#&gt; + 16/16 vertices, named, from 896625e:\n#&gt;  [1] Jessie  Sidney  Britt   Donnie  Karl    Berry   Rene   \n#&gt;  [8] Shayne  Elisha  Whitney Odell   Lacy    Eugene  Jude   \n#&gt; [15] Rickie  Tommy\n\nRészletes információ az élekről.\n\nE(g) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 27/27 edges from 896625e (vertex names):\n#&gt;  [1] Jessie --Sidney  Jessie --Britt   Sidney --Britt  \n#&gt;  [4] Sidney --Donnie  Karl   --Berry   Sidney --Rene   \n#&gt;  [7] Britt  --Rene    Sidney --Shayne  Sidney --Elisha \n#&gt; [10] Sidney --Whitney Jessie --Whitney Donnie --Odell  \n#&gt; [13] Sidney --Odell   Rene   --Whitney Donnie --Shayne \n#&gt; [16] Jessie --Lacy    Rene   --Lacy    Elisha --Eugene \n#&gt; [19] Eugene --Jude    Berry  --Odell   Odell  --Rickie \n#&gt; [22] Karl   --Odell   Britt  --Lacy    Elisha --Jude   \n#&gt; [25] Whitney--Lacy    Britt  --Whitney Karl   --Tommy\n\nCsak az élek száma.\n\ngsize(g) # élek száma\n#&gt; [1] 27\n\nCsak a csúcsok száma.\n\ngorder(g) # csúcsok száma\n#&gt; [1] 16"
  },
  {
    "objectID": "02_alapfogalmak.html#a-fejezet-fontos-fogalmai",
    "href": "02_alapfogalmak.html#a-fejezet-fontos-fogalmai",
    "title": "2  Alapfogalmak",
    "section": "2.1 A fejezet fontos fogalmai",
    "text": "2.1 A fejezet fontos fogalmai\n\nhálózat / gráf\n\ncsúcsok és élek együttese\n\ncsúcs / csomópont\n\ntetszőleges egyed, személy, tárgy vagy fogalom\n\nél / kapcsolat / link\n\nKét csúcs közötti kapcsolat. Az élek lehetnek irányítottak és irányítatlanok.\n\nirányított él\n\nolyan él, amely határozottan egyik csúcsból a másik csúcsba mutató kapcsolatot reprezentál, például weboldalak között a linkek.\n\nirányítatlan él\n\nolyan él, amely nem reprezentál egy irányba mutató kapcsolatot, a két csúcs ilyenkor oda-vissza irányba kapcsolódik egymáshoz.\n\nN\n\ncsúcsok száma a gráfban\n\nL\n\nélek száma a gráfban\n\nteljes gráf\n\nolyan gráf, amelynek minden csúcsa kapcsolódik az összes többi csúcshoz. Teljes gráfban \\(L=\\frac{N(N-1)}{2}\\)\n\nfokszám\n\negy csúcs fokszáma az csúcshoz kapcsolódó élek száma. Jele: \\(k\\)\n\nátlagos fokszám\n\nIrányítatlan hálózatban az egyes csúcsok fokszámait összeadjuk és osztjuk a csúcsok számával: \\(\\bar{k} = \\frac{k_1+k_2+\\dots+k_N}{N} = \\frac{2L}{N}\\). Irányított hálózatban külön vizsgáljuk a bejövő (\\(k_i^{be}\\)) és a kimenő éleket (\\(k_i^{ki}\\)). Egy csúcs összfokszáma: \\(k_i=k_i^{be} + k_i^{ki}\\). Irányított gráfban \\(\\bar{k^{be}} = \\frac{k_1^{be}+k_2^{be}+\\dots+k_N^{be}}{N}=\\frac{L}{N}\\), \\(\\bar{k^{ki}} = \\frac{k_1^{ki}+k_2^{ki}+\\dots+k_N^{ki}}{N}=\\frac{L}{N}\\)\n\nfokszámeloszlás\n\nannak a valószínűsége, hogy a gráfban egy véletlenszerűen kiválasztott pontnak éppen \\(k\\) legyen a fokszáma. Jelölése: \\(p_k\\). Véletlen gráfokban a fokszámeloszlás Poisson-eloszlást követ, skálafüggetlen hálózatokban hatványfüggvény szerinti eloszlást."
  },
  {
    "objectID": "02_alapfogalmak.html#hálózatok-létrehozása",
    "href": "02_alapfogalmak.html#hálózatok-létrehozása",
    "title": "2  Alapfogalmak",
    "section": "2.2 Hálózatok létrehozása",
    "text": "2.2 Hálózatok létrehozása\nEbben a fejezetben tovább részletezzük a hálózatok létrehozását. A korábban látott R függvényeken túl, a következőkről lesz szó:\n\nas_adjacency_matrix() - igraph objektum szomszédsági mátrixszá alakítása\ngraph.adjacency() - igraph objektum létrehozása szomszédsági mátrixból\ngraph_from_literal() - igraph objektum létrehozása literálból\nmake_full_graph() - teljes gráfok készítése\nmake_ring() - gyűrű létrehozása.\nmake_star() - csillag létrehozása\nmake_tree() - fa létrehozása\n\nAlapvetően kétféle adatstruktúrából építhetünk hálózatot:\n\nélek listájából és\nszomszédsági mátrixból.\n\n\n2.2.1 Élek listája\nKorábban már láttuk, hogyan hozhatunk létre élek listájából gráfot. Most az elek_listaja_7.xlsx-ben rendeltünk össze 7 csúcsot 7 éllel.\n\ndf &lt;- rio::import(file = \"adat/elek_listaja_7.xlsx\")\ndf\n#&gt;   from to\n#&gt; 1    A  B\n#&gt; 2    A  C\n#&gt; 3    A  D\n#&gt; 4    A  E\n#&gt; 5    A  F\n#&gt; 6    E  F\n#&gt; 7    F  G\n\nKészítsük el és ábrázoljuk a fenti hálózatot.\n\nlibrary(igraph)\ng &lt;- graph.edgelist(as.matrix(df), directed = F)\nplot(g)\n\n\n\n\nA fontos információk könnyen lekérdezhetők.\n\nV(g)\n#&gt; + 7/7 vertices, named, from 8aebe26:\n#&gt; [1] A B C D E F G\nE(g)\n#&gt; + 7/7 edges from 8aebe26 (vertex names):\n#&gt; [1] A--B A--C A--D A--E A--F E--F F--G\n\nEgy létező gráf szomszédsági mátrixa könnyen meghatározható.\n\nas_adjacency_matrix(g) # igraph objektum szomszédsági mátrixszá alakítása\n#&gt; 7 x 7 sparse Matrix of class \"dgCMatrix\"\n#&gt;   A B C D E F G\n#&gt; A . 1 1 1 1 1 .\n#&gt; B 1 . . . . . .\n#&gt; C 1 . . . . . .\n#&gt; D 1 . . . . . .\n#&gt; E 1 . . . . 1 .\n#&gt; F 1 . . . 1 . 1\n#&gt; G . . . . . 1 .\n\nLátható, hogy irányítatlan gráfok esetében szimmetrikus a szomszédsági mátrix. Ott van 1-es, ahol a két csúcs között él vezet, és ott 0 (az egyszerűbb olvashatóság miatt pont), ahol nem.\n\n\n2.2.2 Szomszédsági mátrix\nKönnyen létrehozhatunk magunk is szomszédsági mátrixot, és abból igraph objektumot.\nElső esetben készítsünk 3 izolált csúcsból gráfot.\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm1 &lt;- matrix(data = c(0, 0, 0,\n                      0, 0, 0, \n                      0, 0, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm1\n#&gt;   A B C\n#&gt; A 0 0 0\n#&gt; B 0 0 0\n#&gt; C 0 0 0\n\n\n# gráf létrehozása\ng1 &lt;- graph.adjacency(m1, mode = \"undirected\")\nplot(g1) # gráf megrajzolása\n\n\n\n\nA 3 csúcsból kettő legyen összekötve\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm2 &lt;- matrix(data = c(0, 1, 0,\n                      1, 0, 0, \n                      0, 0, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm2\n#&gt;   A B C\n#&gt; A 0 1 0\n#&gt; B 1 0 0\n#&gt; C 0 0 0\n\n\n# gráf létrehozása\ng2 &lt;- graph.adjacency(m2, mode = \"undirected\")\nplot(g2) # gráf megrajzolása\n\n\n\n\nA 3 csúcsból két pár legyen összekötve\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm3 &lt;- matrix(data = c(0, 1, 0,\n                      1, 0, 1, \n                      0, 1, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm3\n#&gt;   A B C\n#&gt; A 0 1 0\n#&gt; B 1 0 1\n#&gt; C 0 1 0\n\n\n# gráf létrehozása\ng3 &lt;- graph.adjacency(m3, mode = \"undirected\")\nplot(g3) # gráf megrajzolása\n\n\n\n\nMinden csúcs össze legyen kötve.\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm4 &lt;- matrix(data = c(0, 1, 1,\n                      1, 0, 1, \n                      1, 1, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm4\n#&gt;   A B C\n#&gt; A 0 1 1\n#&gt; B 1 0 1\n#&gt; C 1 1 0\n\n\n# gráf létrehozása\ng4 &lt;- graph.adjacency(m4, mode = \"undirected\")\nplot(g4) # gráf megrajzolása\n\n\n\n\n\n\n2.2.3 Literális létrehozás\nKisebb hálózatok esetén nevekből is létrehozhatunk gráfot:\n\ngs1 &lt;- graph_from_literal(A, B, C);plot(gs1)\ngs2 &lt;- graph_from_literal(A-B, C);plot(gs2)\ngs3 &lt;- graph_from_literal(A-B-C);plot(gs3)\ngs4 &lt;- graph_from_literal(A-B-C, A-C);plot(gs4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.4 Speciális gráfok\nSpeciális gráfok létrehozását is megkönnyíti az {igraph} csomag.\nTeljes gráfok készítése.\n\n# teljes gráfok készítése\nplot(make_full_graph(5, directed = FALSE, loops = FALSE))\nplot(make_full_graph(10, directed = FALSE, loops = FALSE))\nplot(make_full_graph(20, directed = FALSE, loops = FALSE))\n\n\n\n\n\n\n\n\n\n\nGyűrű létrehozása.\n\n# gyűrű létrehozása\nplot(print_all(make_ring(5)))\n#&gt; IGRAPH 8c32f57 U--- 5 5 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from 8c32f57:\n#&gt; [1] 1--2 2--3 3--4 4--5 1--5\nplot(print_all(make_ring(10)))\n#&gt; IGRAPH 8c34670 U--- 10 10 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from 8c34670:\n#&gt;  [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10\nplot(print_all(make_ring(20)))\n#&gt; IGRAPH 8c38c73 U--- 20 20 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from 8c38c73:\n#&gt;  [1]  1-- 2  2-- 3  3-- 4  4-- 5  5-- 6  6-- 7  7-- 8  8-- 9 ...\n#&gt; [10] 10--11 11--12 12--13 13--14 14--15 15--16 16--17 17--18 ...\n#&gt; [19] 19--20  1--20\n\n\n\n\n\n\n\n\n\n\nCsillag létrehozása.\n\n# csillag létrehozása\nplot(make_star(5, mode = \"undirected\"))\nplot(make_star(10, mode = \"undirected\"))\nplot(make_star(20, mode = \"undirected\"))\n\n\n\n\n\n\n\n\n\n\nFa létrehozása\n\n# fa létrehozása\nplot(make_tree(10, 3, mode = \"undirected\"))\nplot(make_tree(20, 3, mode = \"undirected\"))\nplot(make_tree(60, 3, mode = \"undirected\"))"
  },
  {
    "objectID": "02_alapfogalmak.html#hálózat-attribútumai",
    "href": "02_alapfogalmak.html#hálózat-attribútumai",
    "title": "2  Alapfogalmak",
    "section": "2.3 Hálózat attribútumai",
    "text": "2.3 Hálózat attribútumai\nEbben a fejezetben további jellemzőkkel látjuk el a hálózatokat. A korábban látott R függvényeken túl, a következőkről lesz szó:\n\nvertex_attr() - csúcsok attribútumainak lekérdezése\nedge_attr() - élek attribútumainak lekérdezése\nset_vertex_attr() - csúcsok attribútumainak beállítása\nset_edge_attr()- élek attribútumainak beállítása\ngraph_from_data_frame() - gráf létrehozása attribútumokkal adattáblák alapján.\n\n\n2.3.1 Attribútumok hozzáadása\nEgy hálózatban a csúcsok és élek számos tulajdonsággal (vagy más néven attribútummal) rendelkezhetnek.\nA korábbi példában létrehozott g gráf egyetlen csúcs attribútummal rendelkezik. A csúcsok nevével vagy más néven címkéjével.\n\ng # az igraph objektum kiírása a képernyőre\n#&gt; IGRAPH 8aebe26 UN-- 7 7 -- \n#&gt; + attr: name (v/c)\n#&gt; + edges from 8aebe26 (vertex names):\n#&gt; [1] A--B A--C A--D A--E A--F E--F F--G\n\nA csúcsok és élek aktuális attribútumait könnyen meghatározhatjuk.\n\nvertex_attr(g) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n\n\nedge_attr(g) # élek attribútumai (jelenleg üres)\n#&gt; list()\n\nHa szeretnénk életkort hozzáadni minden csúcshoz, akkor a set_vertex_attr() függvényt használjuk.\n\ng &lt;- set_vertex_attr(graph = g, \n                     name = \"age\", \n                     value = c(20, 25, 21, 23, 24, 23, 22)\n                     )\n\nHa most ellenőrizzük a csúcsok jellemzőit, akkor már a neven kívül a kor attribútumot is láthatjuk a listában.\n\nvertex_attr(g) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n#&gt; \n#&gt; $age\n#&gt; [1] 20 25 21 23 24 23 22\n\nHa szeretnénk a barátság erősségének egyfajta mérőszámaként a heti telefonhívások számt jellemzőként hozzáadni minden egyes élhez, akkor a set_edge_attr() függvényt használjuk.\n\ng &lt;- set_edge_attr(graph = g, \n                   name = \"frequency\", \n                   value = c(2, 1, 1, 1, 3, 2, 4)\n                   )\n\nHa most ellenőrizzük az élek jellemzőit, akkor már nem üres listát kapunk.\n\nedge_attr(g) # élek attribútumai\n#&gt; $frequency\n#&gt; [1] 2 1 1 1 3 2 4\n\nAz attribútumok meghatározása történhet a gráf létrehozásával egyidőben.\nHa előkészítettük az attribútumokkal rendelkező csúcsok és élek adattábláit, akkor a graph_from_data_frame() függvénnyel egy lépéyben is létrehozhatjuk a hálózatot.\n\nnodes_df &lt;- rio::import(file = \"adat/vertices_df_7.xlsx\")\nedges_df &lt;- rio::import(file = \"adat/edges_df_7.xlsx\")\n\ng_from_df &lt;- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = F)\n\n\nplot(g_from_df) # hálózat kirajzolása\n\n\n\n\n\nvertex_attr(g_from_df) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n#&gt; \n#&gt; $age\n#&gt; [1] 20 25 21 23 24 23 22\nedge_attr(g_from_df) # élek attribútumai\n#&gt; $frequency\n#&gt; [1] 2 1 1 1 3 2 4\n\nAhogyan a fenti outputok is utalnak rá a csúcs és él attribútumok a dollárjeles ($) hivatkozással is elérhetők.\n\nV(g)$name  # a csúcsok 'name' attribútuma\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\nV(g)$age # a csúcsok 'age' attribútuma\n#&gt; [1] 20 25 21 23 24 23 22\nE(g)$frequency # az élek 'frequency' attribútuma\n#&gt; [1] 2 1 1 1 3 2 4\n\n\n\n2.3.2 Élek szűrése\nKülönösen nagy hálózatok esetében fontos lehet a számunkra érdekes élek lekérdezése vagy szűrése. A dupla szögletes zárójelet ([[) használhatjuk a kívánt élek eléréséhez. Az .inc() segítségével a csúcsok nevére tehetünk megszorítást, de egyszerűen használhatjuk az élek egyes attribútumait is.\n\nE(g)[[.inc('E')]] # azon élek leszűrése, ahol az egyik csúcs az 'E'\n#&gt; + 2/7 edges from 8aebe26 (vertex names):\n#&gt;   tail head tid hid frequency\n#&gt; 4    A    E   1   5         1\n#&gt; 6    E    F   5   6         2\n\n\nE(g)[[frequency &gt;= 3]] # azon élek leszűrése, ahol az élek frequency attribútuma legalább 3\n#&gt; + 2/7 edges from 8aebe26 (vertex names):\n#&gt;   tail head tid hid frequency\n#&gt; 5    A    F   1   6         3\n#&gt; 7    F    G   6   7         4\n\n\n2.3.2.1 Feladat\n\nA friends.xlsx éleket tartalmazó adattáblája alapján hozzunk létre egy új gráfot, majd az egyes csúcsokhoz rendre adjuk hozzá a következő attribútumokat:\n\ngenders: “M”, “F”, “F”, “M”, “M”, “M”, “F”, “M”, “M”, “F”, “M”, “F”, “M”, “F”, “M”, “M”\nages: 18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20\n\nAz egyes élekhez adjuk hozzá, hogy a barátok hetente hány órát töltenek együtt, melyek rendre:\n\nhours: 1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5, 1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4.\n\nEzt követően kérdezzük le a csúcsok attribútumait, valamint az első 5 csúcs nevét. Majd az élek attribútumait, valamint a Britt-et tartalmazó éleket, és azokat a barátokat, akik legalább 4 órát töltenek együtt hetente.\n\nAdatok beolvasása, előkészítése:\n\nfriends_edges_df &lt;- rio::import(file = \"adat/friends.xlsx\")\n\n# nemre vonatkozó információ \ngenders &lt;- c(\"M\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"M\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"M\")\n\n# életkorra vonatkozó információ\nages &lt;- c(18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20)\n\nGráf létrehozása:\n\n# mátrixszá alakítjuk\nfriends_edges_mat &lt;- as.matrix(friends_edges_df)\n\n# igraph objektum létrehozása\nfriends_g &lt;- graph.edgelist(friends_edges_mat, directed = FALSE)\n\nCsúcsokra vonatkozó utasítások:\n\n# Létrehozunk egy 'gender' nevű új attribútumot a csúcsokhoz\nfriends_g &lt;- set_vertex_attr(friends_g, \"gender\", value = genders)\n\n# Létrehozunk egy 'age' nevű új attribútumot a csúcsokhoz\nfriends_g &lt;- set_vertex_attr(friends_g, \"age\", value = ages)\n\n# A csúcsok összes attribútumának lekérdezése, lista output\nvertex_attr(friends_g)\n#&gt; $name\n#&gt;  [1] \"Jessie\"  \"Sidney\"  \"Britt\"   \"Donnie\"  \"Karl\"    \"Berry\"  \n#&gt;  [7] \"Rene\"    \"Shayne\"  \"Elisha\"  \"Whitney\" \"Odell\"   \"Lacy\"   \n#&gt; [13] \"Eugene\"  \"Jude\"    \"Rickie\"  \"Tommy\"  \n#&gt; \n#&gt; $gender\n#&gt;  [1] \"M\" \"F\" \"F\" \"M\" \"M\" \"M\" \"F\" \"M\" \"M\" \"F\" \"M\" \"F\" \"M\" \"F\" \"M\"\n#&gt; [16] \"M\"\n#&gt; \n#&gt; $age\n#&gt;  [1] 18 19 21 20 22 18 23 21 22 20 20 22 21 18 19 20\n\n# Az első 5 csúcs attribútumának lekérdezése, adattábla nézet\nV(friends_g)[[1:5]] \n#&gt; + 5/16 vertices, named, from 8cebe35:\n#&gt;     name gender age\n#&gt; 1 Jessie      M  18\n#&gt; 2 Sidney      F  19\n#&gt; 3  Britt      F  21\n#&gt; 4 Donnie      M  20\n#&gt; 5   Karl      M  22\n\nÉlekre vonatkozó utasítások:\n\n# A barátok hetente hány órát töltenek együtt\nhours &lt;- c(1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5, 1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4)\n\n# Él attribútum (`hours`) hozzáadása\nfriends_g &lt;- set_edge_attr(friends_g, \"hours\", value = hours)\n\n# Az él attribútumok megjelenítése\nedge_attr(friends_g)\n#&gt; $hours\n#&gt;  [1] 1 2 2 1 2 5 5 1 1 3 2 1 1 5 1 2 4 1 3 1 1 1 4 1 3 3 4\n\n# Azon élek megjelenítése, amelyek tartalmazzák a \"Britt\" nevet\nE(friends_g)[[.inc('Britt')]]  \n#&gt; + 5/27 edges from 8cebe35 (vertex names):\n#&gt;      tail    head tid hid hours\n#&gt; 2  Jessie   Britt   1   3     2\n#&gt; 3  Sidney   Britt   2   3     2\n#&gt; 7   Britt    Rene   3   7     5\n#&gt; 23  Britt    Lacy   3  12     4\n#&gt; 26  Britt Whitney   3  10     3\n\n# Az összes olyan él (barát) megjelenítése, akik hetente 4 óránál többet vagy 4 órát töltenek együtt\nE(friends_g)[[hours&gt;=4]]  \n#&gt; + 6/27 edges from 8cebe35 (vertex names):\n#&gt;      tail    head tid hid hours\n#&gt; 6  Sidney    Rene   2   7     5\n#&gt; 7   Britt    Rene   3   7     5\n#&gt; 14   Rene Whitney   7  10     5\n#&gt; 17   Rene    Lacy   7  12     4\n#&gt; 23  Britt    Lacy   3  12     4\n#&gt; 27   Karl   Tommy   5  16     4\n\n\n\n\n2.3.3 Hálózat megjelenítése\nA hálózatok megjelenítésén is fejleszthetünk a csúcsra vonatkozó attribútumok segítségével.\nAdjunk egy új color attribútumot a csúcsokhoz. Minden csúcs színe vagy piros vagy fehér lesz az életkortól függően.\n\nV(g)$color &lt;- ifelse(V(g)$age &gt; 22, \"red\", \"white\") \n\nA plot() függvény felhasználja ezt az információt (a V8g)$color-t), de alapértelmezett (minden csúcsra vonatkozó) értékeket is beállíthatunk.\n\nplot(g, vertex.label.color=\"black\")\n\n\n\n\nA hálózatok megjelenése során a legfontosabb paraméterek:\n\ncsúcsok esetében:\n\nméret (például több kapcsolattal rendelkező csúcsok nagyobb méretben jelennek meg)\ncímke (jelentős csúcsok azonosítása, de a sok szöveg zavaró lehet)\nszín (különböző kategóriák megjelenése, például nem)\nforma (különböző kategóriák megjelenése, például nem)\n\nélek esetében:\n\nvastagság (az él súlya, fontossága)\nszín (kapcsolat kategorikus jellemzője)\nvonal típusa (kapcsolat kategorikus jellemzője).\n\n\nA fentieken túl az {igraph} csomag számos elrendezést kínál a megjelenítés során, amelyek a legoptimálisabb vizualizációt biztosíthatják. Ezek mindegyike biztosítja:\n\nminimalizálja az élek kereszteződését\na csúcsok nem lapolják át egymást\naz élek hossza egyenlő, amennyire lehet\na gráf legyen szimmetrikus, amennyire lehet\na nagyobb hatású csúcsok legyenek a középpontban\n\nHa szeretnénk speciális elrendezést választani, akkor a layout= argumentumot kell használnunk a plot() függvényben.\n\nplot(g, layout = layout_in_circle(g))\n\n\n\n\n\nplot(g, layout = layout_with_fr(g))\n\n\n\n\n\nplot(g, layout = layout_with_kk(g))\n\n\n\n\n\nplot(g, layout = layout_on_grid(g))\n\n\n\n\n\nplot(g, layout = layout_with_lgl(g))\n\n\n\n\n\nplot(g, layout = layout_as_tree(g))\n\n\n\n\nA legtöbb esetben a layout_nicely() megfelelő választás, amely maga választja ki az optimális megjelenést.\n\nplot(g, layout = layout_nicely(g))\n\n\n\n\n\n2.3.3.1 Feladat\n\nHozzunk létre adattáblákból egy hálózatot. A friends2_edges_df.xlsx az éleket, a friends2_nodes_df.xlsx a csúcsokat tartalmazza, mindkét adattábla &gt;tartalmaz attribútumokat is (az éleknél az hours (az egymással töltött heti óraszám), a csúcsoknál a gender (nem)).\n\nKérdezzük le az összes olyan élt (barátot), akik hetente 5 óránál többet vagy 5 órát töltenek együtt.\nMegjelenítéshez a csúcsok színét állítsuk be \"orange\", illetve \"dodgerblue\" színekre.\nPróbáljuk ki a körhálózatot, a Fruchterman-Reingold elrendezésű hálózatot, a faszerkezet megjelenítését és a legjobban illeszkedő megjelenítést.\nMódosítsuk a hálózat éleinek vastagságát a súlyuk alapján. A súly legyen az együtt töltött órák száma. A plot() függvényben használjuk a &gt;edge.width= argumentumot.\nHozzunk létre egy új gráfobjektumot a meglévő alapján. Az új gráf minden éle két óránál nagyobb súlyú lesz. Ez a delete_edges() használatával &gt;valósítható meg, amely két argumentumból áll. Az első a gráfobjektum, a második pedig az eltávolítandó élek részhalmaza. Ebben az esetben eltávolít &gt;minden olyan élt, amelynek értéke kevesebb, mint két óra.\n\n\nGráf létrehozása:\n\nfriends2_edges_df &lt;- rio::import(file = \"adat/friends2_edges_df.xlsx\")\nfriends2_nodes_df &lt;- rio::import(file = \"adat/friends2_nodes_df.xlsx\")\n\n# igraph objektum létrehozása attributumok felvitelével együtt\nfriends2_g &lt;- graph_from_data_frame(d = friends2_edges_df, vertices = friends2_nodes_df, directed = FALSE)\n\nKérdezzük le az összes olyan élt (barátot), akik hetente 5 óránál többet vagy 5 órát töltenek együtt:\n\n# Az összes olyan él (barát) megjelenítése, akik hetente 5 óránál többet vagy 5 órát töltenek együtt\nE(friends2_g)[[hours &gt;= 5]]\n#&gt; + 4/25 edges from 8d5f8ee (vertex names):\n#&gt;         tail      head tid hid hours\n#&gt; 5     Kelley Valentine   3   6     5\n#&gt; 8     Ronald   Jasmine   4   8     5\n#&gt; 12 Valentine     Perry   6  15     5\n#&gt; 15   Jasmine      Juan   8   9     6\n\nMegjelenítéshez a csúcsok színét állítsuk be \"orange\", illetve \"dodgerblue\" színekre:\n\n# A csúcsok színének beállítása nem alapján\nV(friends2_g)$color &lt;- ifelse(V(friends2_g)$gender == \"F\", \"orange\", \"dodgerblue\")\n\n\n# Az igraph ábra megjelenítése\nplot(friends2_g, vertex.label.color = \"black\")\n\n\n\n\nPróbáljuk ki a körhálózatot, a Fruchterman-Reingold elrendezésű hálózatot, a faszerkezet megjelenítését és a legjobban illeszkedő megjelenítést:\n\n# Körhálózat megjelenítése\nplot(friends2_g, vertex.label.color = \"black\", layout = layout_in_circle(friends2_g))\n\n\n\n\n\n# Fruchterman-Reingold elrendezésű hálózat\nplot(friends2_g, vertex.label.color = \"black\", layout = layout_with_fr(friends2_g))\n\n\n\n\n\n# Faszerkezet megjelenítése\nm &lt;- layout_as_tree(friends2_g)\nplot(friends2_g, vertex.label.color = \"black\", layout = m)\n\n\n\n\n\n# a legjobban illeszkedő megjelenítés\nm1 &lt;- layout_nicely(friends2_g)\nplot(friends2_g, vertex.label.color = \"black\", layout = m1)\n\n\n\n\nMódosítsuk a hálózat éleinek vastagságát a súlyuk alapján. A súly legyen az együtt töltött órák száma. A plot() függvényben használjuk a edge.width= argumentumot.\n\n# Hozzunk létre egy `w1` vektort élsúlyozásokból a barátok együtt töltött órák száma alapján.\nw1 &lt;- E(friends2_g)$hours\n\n# Ábrázoljuk a hálózatot úgy, hogy az `edge.width=` az imént létrehozott súlyvektorra legyen beállítva. \n# Az edge.color = 'black' használata biztosítja, hogy minden él fekete legyen.\nm1 &lt;- layout_nicely(friends2_g)\nplot(friends2_g, \n        vertex.label.color = \"black\", \n        edge.color = 'black',\n        edge.width = w1,\n        layout = m1)\n\n\n\n\nHozzunk létre egy új gráfobjektumot a meglévő alapján. Az új gráf minden éle két óránál nagyobb súlyú lesz. Ez a delete_edges() használatával valósítható meg, amely két argumentumból áll. Az első a gráfobjektum, a második pedig az eltávolítandó élek részhalmaza. Ebben az esetben eltávolít minden olyan élt, amelynek értéke kevesebb, mint két óra.\n\n# új gráf létrehozása élek törlésével\nfriends2_g2 &lt;- delete_edges(friends2_g, E(friends2_g)[hours &lt; 2])\n\n\n# Végül rajzoljuk meg az új `friends2_g2` hálózatot az élszélességek és az elrendezés megfelelő vektorával.\nw2 &lt;- E(friends2_g2)$hours\nm2 &lt;- layout_nicely(friends2_g2)\n\nplot(friends2_g2, \n     vertex.label.color = \"black\", \n     edge.color = 'black',\n     edge.width = w2,\n     layout = m2)"
  },
  {
    "objectID": "02_alapfogalmak.html#königsbergi-hidak-problémája---1736",
    "href": "02_alapfogalmak.html#königsbergi-hidak-problémája---1736",
    "title": "2  Alapfogalmak",
    "section": "2.4 Königsbergi hidak problémája - 1736",
    "text": "2.4 Königsbergi hidak problémája - 1736\nHaladjunk át minden hídon de csak pontosan egyszer. Részletek.\nKét szempontból fontos:\n\nbizonyos problémák megoldása egyszerűbb, ha gráfként ábrázoljuk őket\naz adott gráf belső tulajdonságai meghatározóak lehetnek\n\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                \"A\",\"B\",\n                \"A\",\"C\", \n                \"A\",\"D\",\n                \"B\",\"A\",\n                \"B\",\"D\",\n                \"C\",\"A\",\n                \"C\",\"D\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1 name2\n#&gt;   &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 A     B    \n#&gt; 2 A     C    \n#&gt; 3 A     D    \n#&gt; 4 B     A    \n#&gt; 5 B     D    \n#&gt; 6 C     A\n\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\nhas_eulerian_path(g)\n#&gt; [1] FALSE\nhas_eulerian_cycle(g)\n#&gt; [1] FALSE\n\n\n1875-ben a B és C terület között új hidat építettek, így pontosan 2 páratlan fokszámú csúcs keletkezett, és a probléma megoldhatóvá vált.\n\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                \"A\",\"B\",\n                \"A\",\"C\", \n                \"A\",\"D\",\n                \"B\",\"A\",\n                \"B\",\"D\",\n                \"C\",\"A\",\n                \"C\",\"D\",\n                \"B\",\"C\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1 name2\n#&gt;   &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 A     B    \n#&gt; 2 A     C    \n#&gt; 3 A     D    \n#&gt; 4 B     A    \n#&gt; 5 B     D    \n#&gt; 6 C     A\n\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\nhas_eulerian_path(g)\n#&gt; [1] TRUE\nhas_eulerian_cycle(g)\n#&gt; [1] FALSE\neulerian_path(g)\n#&gt; $epath\n#&gt; + 8/8 edges from 8e86ab1 (vertex names):\n#&gt; [1] A--B A--B A--C A--C A--D B--D B--C C--D\n#&gt; \n#&gt; $vpath\n#&gt; + 9/4 vertices, named, from 8e86ab1:\n#&gt; [1] A B A C A D B C D\n\n\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                1, 2,\n                1, 3,\n                2, 3,\n                2, 4\n)\nfriends.mat &lt;- as.matrix(friends)\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n# A hálózat megjelenítése\nplot(g)\nas_adjacency_matrix(g)\n#&gt; 4 x 4 sparse Matrix of class \"dgCMatrix\"\n#&gt;             \n#&gt; [1,] . 1 1 .\n#&gt; [2,] 1 . 1 1\n#&gt; [3,] 1 1 . .\n#&gt; [4,] . 1 . .\n\n\n\n\n\nV(g) # a csúcsok száma és megnevezése\n#&gt; + 4/4 vertices, from 8e9e1d6:\n#&gt; [1] 1 2 3 4\nE(g) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 4/4 edges from 8e9e1d6:\n#&gt; [1] 1--2 1--3 2--3 2--4\ngsize(g) # élek száma\n#&gt; [1] 4\ngorder(g) # csúcsok száma\n#&gt; [1] 4\ndegree(g) # fokszámok\n#&gt; [1] 2 3 2 1\nmean(degree(g)) # fokszámok átlaga\n#&gt; [1] 2\ndegree.distribution(g) # fokszámeloszlás\n#&gt; [1] 0.00 0.25 0.50 0.25\n\n\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                1, 2,\n                3, 1,\n                3, 2,\n                2, 4\n)\nfriends.mat &lt;- as.matrix(friends)\ng &lt;- graph.edgelist(friends.mat, directed = TRUE)\n# A hálózat megjelenítése\nplot(g)\nas_adjacency_matrix(g)\n#&gt; 4 x 4 sparse Matrix of class \"dgCMatrix\"\n#&gt;             \n#&gt; [1,] . 1 . .\n#&gt; [2,] . . . 1\n#&gt; [3,] 1 1 . .\n#&gt; [4,] . . . .\n\n\n\n\n\nV(g) # a csúcsok száma és megnevezése\n#&gt; + 4/4 vertices, from 8eb1fce:\n#&gt; [1] 1 2 3 4\nE(g) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 4/4 edges from 8eb1fce:\n#&gt; [1] 1-&gt;2 3-&gt;1 3-&gt;2 2-&gt;4\ngsize(g) # élek száma\n#&gt; [1] 4\ngorder(g) # csúcsok száma\n#&gt; [1] 4\nis.directed(g) # irányított gráf\n#&gt; [1] TRUE\ndegree(g) # fokszámok \n#&gt; [1] 2 3 2 1\nmean(degree(g)) # fokszámok átlaga\n#&gt; [1] 2\ndegree.distribution(g) # fokszámeloszlás\n#&gt; [1] 0.00 0.25 0.50 0.25"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Hivatkozások",
    "section": "",
    "text": "Barabási, A.-L. (2011). Behálózva. A hálózatok új tudománya.\nHelikon Kiadó.\n\n\nCsányi, G., & Szendrői, B. (2004). Szociális hálózatok.\nBeszélő, 9(7). http://beszelo.c3.hu/cikkek/szocialis-halozatok\n\n\nCsermely, P. (2005). A rejtett hálózatok ereje. Vince Kiadó. http://linkgroup.semmelweis.hu/weaklinks_HU.php\n\n\nHoffman, T., Basa, B., & N. Kollár, K. (2022). Új sztenderdek a\nmagyar szociometriai gyakorlatban. https://doi.org/10.17627/ALKPSZICH.2022.1.67\n\n\nMérei, F. (1998). Közösségek rejtett hálózata. Osiris Kiadó.\n\n\nMolnár, L. (2020). A\nhálózatelemzés alapfogalmai\n gráfok, centralitás,\nszomszédosság, hidak és a kis világ. In Scientia rerum\npoliticarum (pp. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07"
  }
]